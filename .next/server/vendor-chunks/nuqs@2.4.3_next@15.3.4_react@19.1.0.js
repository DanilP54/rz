"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nuqs@2.4.3_next@15.3.4_react@19.1.0";
exports.ids = ["vendor-chunks/nuqs@2.4.3_next@15.3.4_react@19.1.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/adapters/next.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/adapters/next.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NuqsAdapter: () => (/* binding */ NuqsAdapter)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(rsc)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server-edge.js");

const NuqsAdapter = (0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call NuqsAdapter() from the server but NuqsAdapter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"F:\\code\\rod_zem\\node_modules\\.pnpm\\nuqs@2.4.3_next@15.3.4_react@19.1.0\\node_modules\\nuqs\\dist\\adapters\\next.js",
"NuqsAdapter",
);

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLoader: () => (/* binding */ createLoader),\n/* harmony export */   createParser: () => (/* binding */ createParser),\n/* harmony export */   createSearchParamsCache: () => (/* binding */ createSearchParamsCache),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer),\n/* harmony export */   parseAsArrayOf: () => (/* binding */ parseAsArrayOf),\n/* harmony export */   parseAsBoolean: () => (/* binding */ parseAsBoolean),\n/* harmony export */   parseAsFloat: () => (/* binding */ parseAsFloat),\n/* harmony export */   parseAsHex: () => (/* binding */ parseAsHex),\n/* harmony export */   parseAsIndex: () => (/* binding */ parseAsIndex),\n/* harmony export */   parseAsInteger: () => (/* binding */ parseAsInteger),\n/* harmony export */   parseAsIsoDate: () => (/* binding */ parseAsIsoDate),\n/* harmony export */   parseAsIsoDateTime: () => (/* binding */ parseAsIsoDateTime),\n/* harmony export */   parseAsJson: () => (/* binding */ parseAsJson),\n/* harmony export */   parseAsNumberLiteral: () => (/* binding */ parseAsNumberLiteral),\n/* harmony export */   parseAsString: () => (/* binding */ parseAsString),\n/* harmony export */   parseAsStringEnum: () => (/* binding */ parseAsStringEnum),\n/* harmony export */   parseAsStringLiteral: () => (/* binding */ parseAsStringLiteral),\n/* harmony export */   parseAsTimestamp: () => (/* binding */ parseAsTimestamp)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js\");\n\n\n// src/cache.ts\n\n// src/errors.ts\nvar errors = {\n  303: \"Multiple adapter contexts detected. This might happen in monorepos.\",\n  404: \"nuqs requires an adapter to work with your framework.\",\n  409: \"Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.\",\n  414: \"Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.\",\n  429: \"URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O\",\n  500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n  501: \"Search params cache already populated. Have you called `parse` twice?\"\n};\nfunction error(code) {\n  return `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`;\n}\n\n// src/loader.ts\nfunction createLoader(parsers, { urlKeys = {} } = {}) {\n  function loadSearchParams(input) {\n    if (input instanceof Promise) {\n      return input.then((i) => loadSearchParams(i));\n    }\n    const searchParams = extractSearchParams(input);\n    const result = {};\n    for (const [key, parser] of Object.entries(parsers)) {\n      const urlKey = urlKeys[key] ?? key;\n      const value = searchParams.get(urlKey);\n      result[key] = parser.parseServerSide(value ?? void 0);\n    }\n    return result;\n  }\n  return loadSearchParams;\n}\nfunction extractSearchParams(input) {\n  try {\n    if (input instanceof Request) {\n      if (input.url) {\n        return new URL(input.url).searchParams;\n      } else {\n        return new URLSearchParams();\n      }\n    }\n    if (input instanceof URL) {\n      return input.searchParams;\n    }\n    if (input instanceof URLSearchParams) {\n      return input;\n    }\n    if (typeof input === \"object\") {\n      const entries = Object.entries(input);\n      const searchParams = new URLSearchParams();\n      for (const [key, value] of entries) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v);\n          }\n        } else if (value !== void 0) {\n          searchParams.set(key, value);\n        }\n      }\n      return searchParams;\n    }\n    if (typeof input === \"string\") {\n      if (\"canParse\" in URL && URL.canParse(input)) {\n        return new URL(input).searchParams;\n      }\n      return new URLSearchParams(input);\n    }\n  } catch (e) {\n    return new URLSearchParams();\n  }\n  return new URLSearchParams();\n}\n\n// src/cache.ts\nvar $input = Symbol(\"Input\");\nfunction createSearchParamsCache(parsers, { urlKeys = {} } = {}) {\n  const load = createLoader(parsers, { urlKeys });\n  const getCache = react__WEBPACK_IMPORTED_MODULE_0__.cache(() => ({\n    searchParams: {}\n  }));\n  function parseSync(searchParams) {\n    const c = getCache();\n    if (Object.isFrozen(c.searchParams)) {\n      if (c[$input] && compareSearchParams(searchParams, c[$input])) {\n        return all();\n      }\n      throw new Error(error(501));\n    }\n    c.searchParams = load(searchParams);\n    c[$input] = searchParams;\n    return Object.freeze(c.searchParams);\n  }\n  function parse(searchParams) {\n    if (searchParams instanceof Promise) {\n      return searchParams.then(parseSync);\n    }\n    return parseSync(searchParams);\n  }\n  function all() {\n    const { searchParams } = getCache();\n    if (Object.keys(searchParams).length === 0) {\n      throw new Error(error(500));\n    }\n    return searchParams;\n  }\n  function get(key) {\n    const { searchParams } = getCache();\n    const entry = searchParams[key];\n    if (typeof entry === \"undefined\") {\n      throw new Error(\n        error(500) + `\n  in get(${String(key)})`\n      );\n    }\n    return entry;\n  }\n  return { parse, get, all };\n}\nfunction compareSearchParams(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/debug.ts\nvar debugEnabled = isDebugEnabled();\nfunction warn(message, ...args) {\n  if (!debugEnabled) {\n    return;\n  }\n  console.warn(message, ...args);\n}\nfunction isDebugEnabled() {\n  try {\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n    const test = \"nuqs-localStorage-test\";\n    localStorage.setItem(test, test);\n    const isStorageAvailable = localStorage.getItem(test) === test;\n    localStorage.removeItem(test);\n    if (!isStorageAvailable) {\n      return false;\n    }\n  } catch (error2) {\n    console.error(\n      \"[nuqs]: debug mode is disabled (localStorage unavailable).\",\n      error2\n    );\n    return false;\n  }\n  const debug = localStorage.getItem(\"debug\") ?? \"\";\n  return debug.includes(\"nuqs\");\n}\n\n// src/utils.ts\nfunction safeParse(parser, value, key) {\n  try {\n    return parser(value);\n  } catch (error2) {\n    warn(\n      \"[nuqs] Error while parsing value `%s`: %O\" + (key ? \" (for key `%s`)\" : \"\"),\n      value,\n      error2,\n      key\n    );\n    return null;\n  }\n}\n\n// src/parsers.ts\nfunction createParser(parser) {\n  function parseServerSideNullable(value) {\n    if (typeof value === \"undefined\") {\n      return null;\n    }\n    let str = \"\";\n    if (Array.isArray(value)) {\n      if (value[0] === void 0) {\n        return null;\n      }\n      str = value[0];\n    }\n    if (typeof value === \"string\") {\n      str = value;\n    }\n    return safeParse(parser.parse, str);\n  }\n  return {\n    eq: (a, b) => a === b,\n    ...parser,\n    parseServerSide: parseServerSideNullable,\n    withDefault(defaultValue) {\n      return {\n        ...this,\n        defaultValue,\n        parseServerSide(value) {\n          return parseServerSideNullable(value) ?? defaultValue;\n        }\n      };\n    },\n    withOptions(options) {\n      return {\n        ...this,\n        ...options\n      };\n    }\n  };\n}\nvar parseAsString = createParser({\n  parse: (v) => v,\n  serialize: (v) => `${v}`\n});\nvar parseAsInteger = createParser({\n  parse: (v) => {\n    const int = parseInt(v);\n    if (Number.isNaN(int)) {\n      return null;\n    }\n    return int;\n  },\n  serialize: (v) => Math.round(v).toFixed()\n});\nvar parseAsIndex = createParser({\n  parse: (v) => {\n    const int = parseAsInteger.parse(v);\n    if (int === null) {\n      return null;\n    }\n    return int - 1;\n  },\n  serialize: (v) => parseAsInteger.serialize(v + 1)\n});\nvar parseAsHex = createParser({\n  parse: (v) => {\n    const int = parseInt(v, 16);\n    if (Number.isNaN(int)) {\n      return null;\n    }\n    return int;\n  },\n  serialize: (v) => {\n    const hex = Math.round(v).toString(16);\n    return hex.padStart(hex.length + hex.length % 2, \"0\");\n  }\n});\nvar parseAsFloat = createParser({\n  parse: (v) => {\n    const float = parseFloat(v);\n    if (Number.isNaN(float)) {\n      return null;\n    }\n    return float;\n  },\n  serialize: (v) => v.toString()\n});\nvar parseAsBoolean = createParser({\n  parse: (v) => v === \"true\",\n  serialize: (v) => v ? \"true\" : \"false\"\n});\nfunction compareDates(a, b) {\n  return a.valueOf() === b.valueOf();\n}\nvar parseAsTimestamp = createParser({\n  parse: (v) => {\n    const ms = parseInt(v);\n    if (Number.isNaN(ms)) {\n      return null;\n    }\n    return new Date(ms);\n  },\n  serialize: (v) => v.valueOf().toString(),\n  eq: compareDates\n});\nvar parseAsIsoDateTime = createParser({\n  parse: (v) => {\n    const date = new Date(v);\n    if (Number.isNaN(date.valueOf())) {\n      return null;\n    }\n    return date;\n  },\n  serialize: (v) => v.toISOString(),\n  eq: compareDates\n});\nvar parseAsIsoDate = createParser({\n  parse: (v) => {\n    const date = new Date(v.slice(0, 10));\n    if (Number.isNaN(date.valueOf())) {\n      return null;\n    }\n    return date;\n  },\n  serialize: (v) => v.toISOString().slice(0, 10),\n  eq: compareDates\n});\nfunction parseAsStringEnum(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asEnum = query;\n      if (validValues.includes(asEnum)) {\n        return asEnum;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsStringLiteral(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asConst = query;\n      if (validValues.includes(asConst)) {\n        return asConst;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsNumberLiteral(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asConst = parseFloat(query);\n      if (validValues.includes(asConst)) {\n        return asConst;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsJson(runtimeParser) {\n  return createParser({\n    parse: (query) => {\n      try {\n        const obj = JSON.parse(query);\n        return runtimeParser(obj);\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq(a, b) {\n      return a === b || JSON.stringify(a) === JSON.stringify(b);\n    }\n  });\n}\nfunction parseAsArrayOf(itemParser, separator = \",\") {\n  const itemEq = itemParser.eq ?? ((a, b) => a === b);\n  const encodedSeparator = encodeURIComponent(separator);\n  return createParser({\n    parse: (query) => {\n      if (query === \"\") {\n        return [];\n      }\n      return query.split(separator).map(\n        (item, index) => safeParse(\n          itemParser.parse,\n          item.replaceAll(encodedSeparator, separator),\n          `[${index}]`\n        )\n      ).filter((value) => value !== null && value !== void 0);\n    },\n    serialize: (values) => values.map((value) => {\n      const str = itemParser.serialize ? itemParser.serialize(value) : String(value);\n      return str.replaceAll(separator, encodedSeparator);\n    }).join(separator),\n    eq(a, b) {\n      if (a === b) {\n        return true;\n      }\n      if (a.length !== b.length) {\n        return false;\n      }\n      return a.every((value, index) => itemEq(value, b[index]));\n    }\n  });\n}\n\n// src/url-encoding.ts\nfunction renderQueryString(search) {\n  if (search.size === 0) {\n    return \"\";\n  }\n  const query = [];\n  for (const [key, value] of search.entries()) {\n    const safeKey = key.replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\\+/g, \"%2B\").replace(/=/g, \"%3D\").replace(/\\?/g, \"%3F\");\n    query.push(`${safeKey}=${encodeQueryValue(value)}`);\n  }\n  const queryString = \"?\" + query.join(\"&\");\n  warnIfURLIsTooLong(queryString);\n  return queryString;\n}\nfunction encodeQueryValue(input) {\n  return input.replace(/%/g, \"%25\").replace(/\\+/g, \"%2B\").replace(/ /g, \"+\").replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\"/g, \"%22\").replace(/'/g, \"%27\").replace(/`/g, \"%60\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/[\\x00-\\x1F]/g, (char) => encodeURIComponent(char));\n}\nvar URL_MAX_LENGTH = 2e3;\nfunction warnIfURLIsTooLong(queryString) {\n  if (false) {}\n  if (typeof location === \"undefined\") {\n    return;\n  }\n  const url = new URL(location.href);\n  url.search = queryString;\n  if (url.href.length > URL_MAX_LENGTH) {\n    console.warn(error(414));\n  }\n}\n\n// src/serializer.ts\nfunction createSerializer(parsers, {\n  clearOnDefault = true,\n  urlKeys = {}\n} = {}) {\n  function serialize(arg1BaseOrValues, arg2values = {}) {\n    const [base, search] = isBase(arg1BaseOrValues) ? splitBase(arg1BaseOrValues) : [\"\", new URLSearchParams()];\n    const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues;\n    if (values === null) {\n      for (const key in parsers) {\n        const urlKey = urlKeys[key] ?? key;\n        search.delete(urlKey);\n      }\n      return base + renderQueryString(search);\n    }\n    for (const key in parsers) {\n      const parser = parsers[key];\n      const value = values[key];\n      if (!parser || value === void 0) {\n        continue;\n      }\n      const urlKey = urlKeys[key] ?? key;\n      const isMatchingDefault = parser.defaultValue !== void 0 && (parser.eq ?? ((a, b) => a === b))(value, parser.defaultValue);\n      if (value === null || (parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault) {\n        search.delete(urlKey);\n      } else {\n        search.set(urlKey, parser.serialize(value));\n      }\n    }\n    return base + renderQueryString(search);\n  }\n  return serialize;\n}\nfunction isBase(base) {\n  return typeof base === \"string\" || base instanceof URLSearchParams || base instanceof URL;\n}\nfunction splitBase(base) {\n  if (typeof base === \"string\") {\n    const [path = \"\", ...search] = base.split(\"?\");\n    return [path, new URLSearchParams(search.join(\"?\"))];\n  } else if (base instanceof URLSearchParams) {\n    return [\"\", new URLSearchParams(base)];\n  } else {\n    return [\n      base.origin + base.pathname,\n      new URLSearchParams(base.searchParams)\n    ];\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/adapters/next.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/adapters/next.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NuqsAdapter: () => (/* binding */ NuqsAdapter)\n/* harmony export */ });\n/* harmony import */ var _chunk_ZOGZRKNA_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-ZOGZRKNA.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-ZOGZRKNA.js\");\n/* harmony import */ var _chunk_6TJO5LV6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-6TJO5LV6.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6TJO5LV6.js\");\n/* harmony import */ var _chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunk-5WWTJYGR.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\");\n/* __next_internal_client_entry_do_not_use__ NuqsAdapter auto */ \n\n\n// src/adapters/next.ts\nfunction useNuqsNextAdapter() {\n    const pagesRouterImpl = (0,_chunk_6TJO5LV6_js__WEBPACK_IMPORTED_MODULE_0__.useNuqsNextPagesRouterAdapter)();\n    const appRouterImpl = (0,_chunk_ZOGZRKNA_js__WEBPACK_IMPORTED_MODULE_1__.useNuqsNextAppRouterAdapter)();\n    return {\n        searchParams: appRouterImpl.searchParams,\n        updateUrl (search, options) {\n            if ((0,_chunk_6TJO5LV6_js__WEBPACK_IMPORTED_MODULE_0__.isPagesRouter)()) {\n                return pagesRouterImpl.updateUrl(search, options);\n            } else {\n                return appRouterImpl.updateUrl(search, options);\n            }\n        }\n    };\n}\nvar NuqsAdapter = (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.createAdapterProvider)(useNuqsNextAdapter);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL251cXMvZGlzdC9hZGFwdGVycy9uZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7aUVBRW1FO0FBQ2lCO0FBQ3ZCO0FBRTdELHVCQUF1QjtBQUN2QixTQUFTSTtJQUNQLE1BQU1DLGtCQUFrQkosaUZBQTZCQTtJQUNyRCxNQUFNSyxnQkFBZ0JOLCtFQUEyQkE7SUFDakQsT0FBTztRQUNMTyxjQUFjRCxjQUFjQyxZQUFZO1FBQ3hDQyxXQUFVQyxNQUFNLEVBQUVDLE9BQU87WUFDdkIsSUFBSVIsaUVBQWFBLElBQUk7Z0JBQ25CLE9BQU9HLGdCQUFnQkcsU0FBUyxDQUFDQyxRQUFRQztZQUMzQyxPQUFPO2dCQUNMLE9BQU9KLGNBQWNFLFNBQVMsQ0FBQ0MsUUFBUUM7WUFDekM7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxJQUFJQyxjQUFjUix5RUFBcUJBLENBQUNDO0FBRWpCIiwic291cmNlcyI6WyJGOlxcY29kZVxccm9kX3plbVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjBcXG5vZGVfbW9kdWxlc1xcbnVxc1xcZGlzdFxcYWRhcHRlcnNcXG5leHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VOdXFzTmV4dEFwcFJvdXRlckFkYXB0ZXIgfSBmcm9tICcuLi9jaHVuay1aT0daUktOQS5qcyc7XG5pbXBvcnQgeyB1c2VOdXFzTmV4dFBhZ2VzUm91dGVyQWRhcHRlciwgaXNQYWdlc1JvdXRlciB9IGZyb20gJy4uL2NodW5rLTZUSk81TFY2LmpzJztcbmltcG9ydCB7IGNyZWF0ZUFkYXB0ZXJQcm92aWRlciB9IGZyb20gJy4uL2NodW5rLTVXV1RKWUdSLmpzJztcblxuLy8gc3JjL2FkYXB0ZXJzL25leHQudHNcbmZ1bmN0aW9uIHVzZU51cXNOZXh0QWRhcHRlcigpIHtcbiAgY29uc3QgcGFnZXNSb3V0ZXJJbXBsID0gdXNlTnVxc05leHRQYWdlc1JvdXRlckFkYXB0ZXIoKTtcbiAgY29uc3QgYXBwUm91dGVySW1wbCA9IHVzZU51cXNOZXh0QXBwUm91dGVyQWRhcHRlcigpO1xuICByZXR1cm4ge1xuICAgIHNlYXJjaFBhcmFtczogYXBwUm91dGVySW1wbC5zZWFyY2hQYXJhbXMsXG4gICAgdXBkYXRlVXJsKHNlYXJjaCwgb3B0aW9ucykge1xuICAgICAgaWYgKGlzUGFnZXNSb3V0ZXIoKSkge1xuICAgICAgICByZXR1cm4gcGFnZXNSb3V0ZXJJbXBsLnVwZGF0ZVVybChzZWFyY2gsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFwcFJvdXRlckltcGwudXBkYXRlVXJsKHNlYXJjaCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxudmFyIE51cXNBZGFwdGVyID0gY3JlYXRlQWRhcHRlclByb3ZpZGVyKHVzZU51cXNOZXh0QWRhcHRlcik7XG5cbmV4cG9ydCB7IE51cXNBZGFwdGVyIH07XG4iXSwibmFtZXMiOlsidXNlTnVxc05leHRBcHBSb3V0ZXJBZGFwdGVyIiwidXNlTnVxc05leHRQYWdlc1JvdXRlckFkYXB0ZXIiLCJpc1BhZ2VzUm91dGVyIiwiY3JlYXRlQWRhcHRlclByb3ZpZGVyIiwidXNlTnVxc05leHRBZGFwdGVyIiwicGFnZXNSb3V0ZXJJbXBsIiwiYXBwUm91dGVySW1wbCIsInNlYXJjaFBhcmFtcyIsInVwZGF0ZVVybCIsInNlYXJjaCIsIm9wdGlvbnMiLCJOdXFzQWRhcHRlciJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/adapters/next.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   context: () => (/* binding */ context),\n/* harmony export */   createAdapterProvider: () => (/* binding */ createAdapterProvider),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   renderQueryString: () => (/* binding */ renderQueryString),\n/* harmony export */   useAdapter: () => (/* binding */ useAdapter),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n// src/errors.ts\nvar errors = {\n  303: \"Multiple adapter contexts detected. This might happen in monorepos.\",\n  404: \"nuqs requires an adapter to work with your framework.\",\n  409: \"Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.\",\n  414: \"Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.\",\n  429: \"URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O\",\n  500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n  501: \"Search params cache already populated. Have you called `parse` twice?\"\n};\nfunction error(code) {\n  return `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`;\n}\n\n// src/url-encoding.ts\nfunction renderQueryString(search) {\n  if (search.size === 0) {\n    return \"\";\n  }\n  const query = [];\n  for (const [key, value] of search.entries()) {\n    const safeKey = key.replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\\+/g, \"%2B\").replace(/=/g, \"%3D\").replace(/\\?/g, \"%3F\");\n    query.push(`${safeKey}=${encodeQueryValue(value)}`);\n  }\n  const queryString = \"?\" + query.join(\"&\");\n  warnIfURLIsTooLong(queryString);\n  return queryString;\n}\nfunction encodeQueryValue(input) {\n  return input.replace(/%/g, \"%25\").replace(/\\+/g, \"%2B\").replace(/ /g, \"+\").replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\"/g, \"%22\").replace(/'/g, \"%27\").replace(/`/g, \"%60\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/[\\x00-\\x1F]/g, (char) => encodeURIComponent(char));\n}\nvar URL_MAX_LENGTH = 2e3;\nfunction warnIfURLIsTooLong(queryString) {\n  if (false) {}\n  if (typeof location === \"undefined\") {\n    return;\n  }\n  const url = new URL(location.href);\n  url.search = queryString;\n  if (url.href.length > URL_MAX_LENGTH) {\n    console.warn(error(414));\n  }\n}\n\n// src/debug.ts\nvar debugEnabled = isDebugEnabled();\nfunction debug(message, ...args) {\n  if (!debugEnabled) {\n    return;\n  }\n  const msg = sprintf(message, ...args);\n  performance.mark(msg);\n  try {\n    console.log(message, ...args);\n  } catch (error2) {\n    console.log(msg);\n  }\n}\nfunction warn(message, ...args) {\n  if (!debugEnabled) {\n    return;\n  }\n  console.warn(message, ...args);\n}\nfunction sprintf(base, ...args) {\n  return base.replace(/%[sfdO]/g, (match) => {\n    const arg = args.shift();\n    if (match === \"%O\" && arg) {\n      return JSON.stringify(arg).replace(/\"([^\"]+)\":/g, \"$1:\");\n    } else {\n      return String(arg);\n    }\n  });\n}\nfunction isDebugEnabled() {\n  try {\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n    const test = \"nuqs-localStorage-test\";\n    localStorage.setItem(test, test);\n    const isStorageAvailable = localStorage.getItem(test) === test;\n    localStorage.removeItem(test);\n    if (!isStorageAvailable) {\n      return false;\n    }\n  } catch (error2) {\n    console.error(\n      \"[nuqs]: debug mode is disabled (localStorage unavailable).\",\n      error2\n    );\n    return false;\n  }\n  const debug2 = localStorage.getItem(\"debug\") ?? \"\";\n  return debug2.includes(\"nuqs\");\n}\n\n// src/adapters/lib/context.ts\nvar context = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n  useAdapter() {\n    throw new Error(error(404));\n  }\n});\ncontext.displayName = \"NuqsAdapterContext\";\nif (debugEnabled && typeof window !== \"undefined\") {\n  if (window.__NuqsAdapterContext && window.__NuqsAdapterContext !== context) {\n    console.error(error(303));\n  }\n  window.__NuqsAdapterContext = context;\n}\nfunction createAdapterProvider(useAdapter2) {\n  return ({ children, ...props }) => (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n    context.Provider,\n    { ...props, value: { useAdapter: useAdapter2 } },\n    children\n  );\n}\nfunction useAdapter() {\n  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n  if (!(\"useAdapter\" in value)) {\n    throw new Error(error(404));\n  }\n  return value.useAdapter();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL251cXMvZGlzdC9jaHVuay01V1dUSllHUi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFpRTs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixrQ0FBa0MsS0FBSztBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVEsR0FBRyx3QkFBd0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFFMUM7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsb0RBQWE7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQixLQUFLLG9EQUFhO0FBQ2xEO0FBQ0EsTUFBTSxtQkFBbUIsMkJBQTJCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlEQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZGIiwic291cmNlcyI6WyJGOlxcY29kZVxccm9kX3plbVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjBcXG5vZGVfbW9kdWxlc1xcbnVxc1xcZGlzdFxcY2h1bmstNVdXVEpZR1IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLy8gc3JjL2Vycm9ycy50c1xudmFyIGVycm9ycyA9IHtcbiAgMzAzOiBcIk11bHRpcGxlIGFkYXB0ZXIgY29udGV4dHMgZGV0ZWN0ZWQuIFRoaXMgbWlnaHQgaGFwcGVuIGluIG1vbm9yZXBvcy5cIixcbiAgNDA0OiBcIm51cXMgcmVxdWlyZXMgYW4gYWRhcHRlciB0byB3b3JrIHdpdGggeW91ciBmcmFtZXdvcmsuXCIsXG4gIDQwOTogXCJNdWx0aXBsZSB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIG1heSBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IuIEN1cnJlbnRseSB1c2luZyBgJXNgLCBidXQgYCVzYCAodmlhIHRoZSAlcyBhZGFwdGVyKSB3YXMgYWJvdXQgdG8gbG9hZCBvbiB0b3AuXCIsXG4gIDQxNDogXCJNYXggc2FmZSBVUkwgbGVuZ3RoIGV4Y2VlZGVkLiBTb21lIGJyb3dzZXJzIG1heSBub3QgYmUgYWJsZSB0byBhY2NlcHQgdGhpcyBVUkwuIENvbnNpZGVyIGxpbWl0aW5nIHRoZSBhbW91bnQgb2Ygc3RhdGUgc3RvcmVkIGluIHRoZSBVUkwuXCIsXG4gIDQyOTogXCJVUkwgdXBkYXRlIHJhdGUtbGltaXRlZCBieSB0aGUgYnJvd3Nlci4gQ29uc2lkZXIgaW5jcmVhc2luZyBgdGhyb3R0bGVNc2AgZm9yIGtleShzKSBgJXNgLiAlT1wiLFxuICA1MDA6IFwiRW1wdHkgc2VhcmNoIHBhcmFtcyBjYWNoZS4gU2VhcmNoIHBhcmFtcyBjYW4ndCBiZSBhY2Nlc3NlZCBpbiBMYXlvdXRzLlwiLFxuICA1MDE6IFwiU2VhcmNoIHBhcmFtcyBjYWNoZSBhbHJlYWR5IHBvcHVsYXRlZC4gSGF2ZSB5b3UgY2FsbGVkIGBwYXJzZWAgdHdpY2U/XCJcbn07XG5mdW5jdGlvbiBlcnJvcihjb2RlKSB7XG4gIHJldHVybiBgW251cXNdICR7ZXJyb3JzW2NvZGVdfVxuICBTZWUgaHR0cHM6Ly9lcnIuNDduZy5jb20vTlVRUy0ke2NvZGV9YDtcbn1cblxuLy8gc3JjL3VybC1lbmNvZGluZy50c1xuZnVuY3Rpb24gcmVuZGVyUXVlcnlTdHJpbmcoc2VhcmNoKSB7XG4gIGlmIChzZWFyY2guc2l6ZSA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IHF1ZXJ5ID0gW107XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNlYXJjaC5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBzYWZlS2V5ID0ga2V5LnJlcGxhY2UoLyMvZywgXCIlMjNcIikucmVwbGFjZSgvJi9nLCBcIiUyNlwiKS5yZXBsYWNlKC9cXCsvZywgXCIlMkJcIikucmVwbGFjZSgvPS9nLCBcIiUzRFwiKS5yZXBsYWNlKC9cXD8vZywgXCIlM0ZcIik7XG4gICAgcXVlcnkucHVzaChgJHtzYWZlS2V5fT0ke2VuY29kZVF1ZXJ5VmFsdWUodmFsdWUpfWApO1xuICB9XG4gIGNvbnN0IHF1ZXJ5U3RyaW5nID0gXCI/XCIgKyBxdWVyeS5qb2luKFwiJlwiKTtcbiAgd2FybklmVVJMSXNUb29Mb25nKHF1ZXJ5U3RyaW5nKTtcbiAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xufVxuZnVuY3Rpb24gZW5jb2RlUXVlcnlWYWx1ZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvJS9nLCBcIiUyNVwiKS5yZXBsYWNlKC9cXCsvZywgXCIlMkJcIikucmVwbGFjZSgvIC9nLCBcIitcIikucmVwbGFjZSgvIy9nLCBcIiUyM1wiKS5yZXBsYWNlKC8mL2csIFwiJTI2XCIpLnJlcGxhY2UoL1wiL2csIFwiJTIyXCIpLnJlcGxhY2UoLycvZywgXCIlMjdcIikucmVwbGFjZSgvYC9nLCBcIiU2MFwiKS5yZXBsYWNlKC88L2csIFwiJTNDXCIpLnJlcGxhY2UoLz4vZywgXCIlM0VcIikucmVwbGFjZSgvW1xceDAwLVxceDFGXS9nLCAoY2hhcikgPT4gZW5jb2RlVVJJQ29tcG9uZW50KGNoYXIpKTtcbn1cbnZhciBVUkxfTUFYX0xFTkdUSCA9IDJlMztcbmZ1bmN0aW9uIHdhcm5JZlVSTElzVG9vTG9uZyhxdWVyeVN0cmluZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbi5ocmVmKTtcbiAgdXJsLnNlYXJjaCA9IHF1ZXJ5U3RyaW5nO1xuICBpZiAodXJsLmhyZWYubGVuZ3RoID4gVVJMX01BWF9MRU5HVEgpIHtcbiAgICBjb25zb2xlLndhcm4oZXJyb3IoNDE0KSk7XG4gIH1cbn1cblxuLy8gc3JjL2RlYnVnLnRzXG52YXIgZGVidWdFbmFibGVkID0gaXNEZWJ1Z0VuYWJsZWQoKTtcbmZ1bmN0aW9uIGRlYnVnKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgaWYgKCFkZWJ1Z0VuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbXNnID0gc3ByaW50ZihtZXNzYWdlLCAuLi5hcmdzKTtcbiAgcGVyZm9ybWFuY2UubWFyayhtc2cpO1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICBjb25zb2xlLmxvZyhtc2cpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgaWYgKCFkZWJ1Z0VuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc29sZS53YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc3ByaW50ZihiYXNlLCAuLi5hcmdzKSB7XG4gIHJldHVybiBiYXNlLnJlcGxhY2UoLyVbc2ZkT10vZywgKG1hdGNoKSA9PiB7XG4gICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xuICAgIGlmIChtYXRjaCA9PT0gXCIlT1wiICYmIGFyZykge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZykucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyhhcmcpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBpc0RlYnVnRW5hYmxlZCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0ZXN0ID0gXCJudXFzLWxvY2FsU3RvcmFnZS10ZXN0XCI7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdCk7XG4gICAgY29uc3QgaXNTdG9yYWdlQXZhaWxhYmxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGVzdCkgPT09IHRlc3Q7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGVzdCk7XG4gICAgaWYgKCFpc1N0b3JhZ2VBdmFpbGFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yMikge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBcIltudXFzXTogZGVidWcgbW9kZSBpcyBkaXNhYmxlZCAobG9jYWxTdG9yYWdlIHVuYXZhaWxhYmxlKS5cIixcbiAgICAgIGVycm9yMlxuICAgICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGRlYnVnMiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZGVidWdcIikgPz8gXCJcIjtcbiAgcmV0dXJuIGRlYnVnMi5pbmNsdWRlcyhcIm51cXNcIik7XG59XG5cbi8vIHNyYy9hZGFwdGVycy9saWIvY29udGV4dC50c1xudmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgdXNlQWRhcHRlcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IoNDA0KSk7XG4gIH1cbn0pO1xuY29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTnVxc0FkYXB0ZXJDb250ZXh0XCI7XG5pZiAoZGVidWdFbmFibGVkICYmIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKHdpbmRvdy5fX051cXNBZGFwdGVyQ29udGV4dCAmJiB3aW5kb3cuX19OdXFzQWRhcHRlckNvbnRleHQgIT09IGNvbnRleHQpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKDMwMykpO1xuICB9XG4gIHdpbmRvdy5fX051cXNBZGFwdGVyQ29udGV4dCA9IGNvbnRleHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVBZGFwdGVyUHJvdmlkZXIodXNlQWRhcHRlcjIpIHtcbiAgcmV0dXJuICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiBjcmVhdGVFbGVtZW50KFxuICAgIGNvbnRleHQuUHJvdmlkZXIsXG4gICAgeyAuLi5wcm9wcywgdmFsdWU6IHsgdXNlQWRhcHRlcjogdXNlQWRhcHRlcjIgfSB9LFxuICAgIGNoaWxkcmVuXG4gICk7XG59XG5mdW5jdGlvbiB1c2VBZGFwdGVyKCkge1xuICBjb25zdCB2YWx1ZSA9IHVzZUNvbnRleHQoY29udGV4dCk7XG4gIGlmICghKFwidXNlQWRhcHRlclwiIGluIHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcig0MDQpKTtcbiAgfVxuICByZXR1cm4gdmFsdWUudXNlQWRhcHRlcigpO1xufVxuXG5leHBvcnQgeyBjb250ZXh0LCBjcmVhdGVBZGFwdGVyUHJvdmlkZXIsIGRlYnVnLCBlcnJvciwgcmVuZGVyUXVlcnlTdHJpbmcsIHVzZUFkYXB0ZXIsIHdhcm4gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6TJO5LV6.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6TJO5LV6.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPagesRouter: () => (/* binding */ isPagesRouter),\n/* harmony export */   useNuqsNextPagesRouterAdapter: () => (/* binding */ useNuqsNextPagesRouterAdapter)\n/* harmony export */ });\n/* harmony import */ var _chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-5WWTJYGR.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\");\n/* harmony import */ var next_compat_router_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/compat/router.js */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/compat/router.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\nfunction isPagesRouter() {\n  return typeof window.next?.router?.state?.asPath === \"string\";\n}\nfunction useNuqsNextPagesRouterAdapter() {\n  const router = (0,next_compat_router_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n  const searchParams = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const searchParams2 = new URLSearchParams();\n    if (router === null) {\n      return searchParams2;\n    }\n    for (const [key, value] of Object.entries(router.query)) {\n      if (typeof value === \"string\") {\n        searchParams2.set(key, value);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          searchParams2.append(key, v);\n        }\n      }\n    }\n    return searchParams2;\n  }, [JSON.stringify(router?.query)]);\n  const updateUrl = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((search, options) => {\n    const nextRouter = window.next?.router;\n    const urlParams = extractDynamicUrlParams(\n      nextRouter.pathname,\n      nextRouter.query\n    );\n    const asPath = getAsPathPathname(nextRouter.asPath) + (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.renderQueryString)(search) + location.hash;\n    (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.debug)(\"[nuqs queue (pages)] Updating url: %s\", asPath);\n    const method = options.history === \"push\" ? nextRouter.push : nextRouter.replace;\n    method.call(\n      nextRouter,\n      // This is what makes the URL work (mapping dynamic segments placeholders\n      // in pathname to their values in query, plus search params in query too).\n      {\n        pathname: nextRouter.pathname,\n        query: {\n          // Note: we put search params first so that one that conflicts\n          // with dynamic params will be overwritten.\n          ...urlSearchParamsToObject(search),\n          ...urlParams\n        }\n        // For some reason we don't need to pass the hash here,\n        // it's preserved when passed as part of the asPath.\n      },\n      // This is what makes the URL pretty (resolved dynamic segments\n      // and nuqs-formatted search params).\n      asPath,\n      // And these are the options that are passed to the router.\n      {\n        scroll: options.scroll,\n        shallow: options.shallow\n      }\n    );\n  }, []);\n  return {\n    searchParams,\n    updateUrl\n  };\n}\n(0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.createAdapterProvider)(useNuqsNextPagesRouterAdapter);\nfunction getAsPathPathname(asPath) {\n  return asPath.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\");\n}\nfunction urlSearchParamsToObject(search) {\n  const out = {};\n  for (const key of search.keys()) {\n    const values = search.getAll(key);\n    if (values.length === 1) {\n      out[key] = values[0];\n    } else if (values.length > 1) {\n      out[key] = values;\n    }\n  }\n  return out;\n}\nfunction extractDynamicUrlParams(pathname, values) {\n  const paramNames = /* @__PURE__ */ new Set();\n  const dynamicRegex = /\\[([^\\]]+)\\]/g;\n  const catchAllRegex = /\\[\\.{3}([^\\]]+)\\]$/;\n  const optionalCatchAllRegex = /\\[\\[\\.{3}([^\\]]+)\\]\\]$/;\n  let match;\n  while ((match = dynamicRegex.exec(pathname)) !== null) {\n    const paramName = match[1];\n    if (paramName) {\n      paramNames.add(paramName);\n    }\n  }\n  const dynamicValues = Object.fromEntries(\n    Object.entries(values).filter(([key]) => paramNames.has(key))\n  );\n  const matchCatchAll = catchAllRegex.exec(pathname);\n  if (matchCatchAll && matchCatchAll[1]) {\n    const key = matchCatchAll[1];\n    dynamicValues[key] = values[key] ?? [];\n  }\n  const matchOptionalCatchAll = optionalCatchAllRegex.exec(pathname);\n  if (matchOptionalCatchAll && matchOptionalCatchAll[1]) {\n    const key = matchOptionalCatchAll[1];\n    dynamicValues[key] = values[key] ?? [];\n  }\n  return dynamicValues;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL251cXMvZGlzdC9jaHVuay02VEpPNUxWNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRjtBQUNwQztBQUNMOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnRUFBUztBQUMxQix1QkFBdUIsOENBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILG9CQUFvQixrREFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHFFQUFpQjtBQUMzRSxJQUFJLHlEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEMsd0NBQXdDLEVBQUU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXdEIiwic291cmNlcyI6WyJGOlxcY29kZVxccm9kX3plbVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjBcXG5vZGVfbW9kdWxlc1xcbnVxc1xcZGlzdFxcY2h1bmstNlRKTzVMVjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQWRhcHRlclByb3ZpZGVyLCByZW5kZXJRdWVyeVN0cmluZywgZGVidWcgfSBmcm9tICcuL2NodW5rLTVXV1RKWUdSLmpzJztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvY29tcGF0L3JvdXRlci5qcyc7XG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gaXNQYWdlc1JvdXRlcigpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cubmV4dD8ucm91dGVyPy5zdGF0ZT8uYXNQYXRoID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gdXNlTnVxc05leHRQYWdlc1JvdXRlckFkYXB0ZXIoKSB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBzZWFyY2hQYXJhbXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzZWFyY2hQYXJhbXMyID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGlmIChyb3V0ZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBzZWFyY2hQYXJhbXMyO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyb3V0ZXIucXVlcnkpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNlYXJjaFBhcmFtczIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFsdWUpIHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMyLmFwcGVuZChrZXksIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWFyY2hQYXJhbXMyO1xuICB9LCBbSlNPTi5zdHJpbmdpZnkocm91dGVyPy5xdWVyeSldKTtcbiAgY29uc3QgdXBkYXRlVXJsID0gdXNlQ2FsbGJhY2soKHNlYXJjaCwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5leHRSb3V0ZXIgPSB3aW5kb3cubmV4dD8ucm91dGVyO1xuICAgIGNvbnN0IHVybFBhcmFtcyA9IGV4dHJhY3REeW5hbWljVXJsUGFyYW1zKFxuICAgICAgbmV4dFJvdXRlci5wYXRobmFtZSxcbiAgICAgIG5leHRSb3V0ZXIucXVlcnlcbiAgICApO1xuICAgIGNvbnN0IGFzUGF0aCA9IGdldEFzUGF0aFBhdGhuYW1lKG5leHRSb3V0ZXIuYXNQYXRoKSArIHJlbmRlclF1ZXJ5U3RyaW5nKHNlYXJjaCkgKyBsb2NhdGlvbi5oYXNoO1xuICAgIGRlYnVnKFwiW251cXMgcXVldWUgKHBhZ2VzKV0gVXBkYXRpbmcgdXJsOiAlc1wiLCBhc1BhdGgpO1xuICAgIGNvbnN0IG1ldGhvZCA9IG9wdGlvbnMuaGlzdG9yeSA9PT0gXCJwdXNoXCIgPyBuZXh0Um91dGVyLnB1c2ggOiBuZXh0Um91dGVyLnJlcGxhY2U7XG4gICAgbWV0aG9kLmNhbGwoXG4gICAgICBuZXh0Um91dGVyLFxuICAgICAgLy8gVGhpcyBpcyB3aGF0IG1ha2VzIHRoZSBVUkwgd29yayAobWFwcGluZyBkeW5hbWljIHNlZ21lbnRzIHBsYWNlaG9sZGVyc1xuICAgICAgLy8gaW4gcGF0aG5hbWUgdG8gdGhlaXIgdmFsdWVzIGluIHF1ZXJ5LCBwbHVzIHNlYXJjaCBwYXJhbXMgaW4gcXVlcnkgdG9vKS5cbiAgICAgIHtcbiAgICAgICAgcGF0aG5hbWU6IG5leHRSb3V0ZXIucGF0aG5hbWUsXG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgLy8gTm90ZTogd2UgcHV0IHNlYXJjaCBwYXJhbXMgZmlyc3Qgc28gdGhhdCBvbmUgdGhhdCBjb25mbGljdHNcbiAgICAgICAgICAvLyB3aXRoIGR5bmFtaWMgcGFyYW1zIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAgLi4udXJsU2VhcmNoUGFyYW1zVG9PYmplY3Qoc2VhcmNoKSxcbiAgICAgICAgICAuLi51cmxQYXJhbXNcbiAgICAgICAgfVxuICAgICAgICAvLyBGb3Igc29tZSByZWFzb24gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIHRoZSBoYXNoIGhlcmUsXG4gICAgICAgIC8vIGl0J3MgcHJlc2VydmVkIHdoZW4gcGFzc2VkIGFzIHBhcnQgb2YgdGhlIGFzUGF0aC5cbiAgICAgIH0sXG4gICAgICAvLyBUaGlzIGlzIHdoYXQgbWFrZXMgdGhlIFVSTCBwcmV0dHkgKHJlc29sdmVkIGR5bmFtaWMgc2VnbWVudHNcbiAgICAgIC8vIGFuZCBudXFzLWZvcm1hdHRlZCBzZWFyY2ggcGFyYW1zKS5cbiAgICAgIGFzUGF0aCxcbiAgICAgIC8vIEFuZCB0aGVzZSBhcmUgdGhlIG9wdGlvbnMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSByb3V0ZXIuXG4gICAgICB7XG4gICAgICAgIHNjcm9sbDogb3B0aW9ucy5zY3JvbGwsXG4gICAgICAgIHNoYWxsb3c6IG9wdGlvbnMuc2hhbGxvd1xuICAgICAgfVxuICAgICk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHtcbiAgICBzZWFyY2hQYXJhbXMsXG4gICAgdXBkYXRlVXJsXG4gIH07XG59XG5jcmVhdGVBZGFwdGVyUHJvdmlkZXIodXNlTnVxc05leHRQYWdlc1JvdXRlckFkYXB0ZXIpO1xuZnVuY3Rpb24gZ2V0QXNQYXRoUGF0aG5hbWUoYXNQYXRoKSB7XG4gIHJldHVybiBhc1BhdGgucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpO1xufVxuZnVuY3Rpb24gdXJsU2VhcmNoUGFyYW1zVG9PYmplY3Qoc2VhcmNoKSB7XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBzZWFyY2gua2V5cygpKSB7XG4gICAgY29uc3QgdmFsdWVzID0gc2VhcmNoLmdldEFsbChrZXkpO1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBvdXRba2V5XSA9IHZhbHVlc1swXTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICBvdXRba2V5XSA9IHZhbHVlcztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGV4dHJhY3REeW5hbWljVXJsUGFyYW1zKHBhdGhuYW1lLCB2YWx1ZXMpIHtcbiAgY29uc3QgcGFyYW1OYW1lcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IGR5bmFtaWNSZWdleCA9IC9cXFsoW15cXF1dKylcXF0vZztcbiAgY29uc3QgY2F0Y2hBbGxSZWdleCA9IC9cXFtcXC57M30oW15cXF1dKylcXF0kLztcbiAgY29uc3Qgb3B0aW9uYWxDYXRjaEFsbFJlZ2V4ID0gL1xcW1xcW1xcLnszfShbXlxcXV0rKVxcXVxcXSQvO1xuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBkeW5hbWljUmVnZXguZXhlYyhwYXRobmFtZSkpICE9PSBudWxsKSB7XG4gICAgY29uc3QgcGFyYW1OYW1lID0gbWF0Y2hbMV07XG4gICAgaWYgKHBhcmFtTmFtZSkge1xuICAgICAgcGFyYW1OYW1lcy5hZGQocGFyYW1OYW1lKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZHluYW1pY1ZhbHVlcyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpLmZpbHRlcigoW2tleV0pID0+IHBhcmFtTmFtZXMuaGFzKGtleSkpXG4gICk7XG4gIGNvbnN0IG1hdGNoQ2F0Y2hBbGwgPSBjYXRjaEFsbFJlZ2V4LmV4ZWMocGF0aG5hbWUpO1xuICBpZiAobWF0Y2hDYXRjaEFsbCAmJiBtYXRjaENhdGNoQWxsWzFdKSB7XG4gICAgY29uc3Qga2V5ID0gbWF0Y2hDYXRjaEFsbFsxXTtcbiAgICBkeW5hbWljVmFsdWVzW2tleV0gPSB2YWx1ZXNba2V5XSA/PyBbXTtcbiAgfVxuICBjb25zdCBtYXRjaE9wdGlvbmFsQ2F0Y2hBbGwgPSBvcHRpb25hbENhdGNoQWxsUmVnZXguZXhlYyhwYXRobmFtZSk7XG4gIGlmIChtYXRjaE9wdGlvbmFsQ2F0Y2hBbGwgJiYgbWF0Y2hPcHRpb25hbENhdGNoQWxsWzFdKSB7XG4gICAgY29uc3Qga2V5ID0gbWF0Y2hPcHRpb25hbENhdGNoQWxsWzFdO1xuICAgIGR5bmFtaWNWYWx1ZXNba2V5XSA9IHZhbHVlc1trZXldID8/IFtdO1xuICB9XG4gIHJldHVybiBkeW5hbWljVmFsdWVzO1xufVxuXG5leHBvcnQgeyBpc1BhZ2VzUm91dGVyLCB1c2VOdXFzTmV4dFBhZ2VzUm91dGVyQWRhcHRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6TJO5LV6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6YKAEXDW.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6YKAEXDW.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FLUSH_RATE_LIMIT_MS: () => (/* binding */ FLUSH_RATE_LIMIT_MS),\n/* harmony export */   enqueueQueryStringUpdate: () => (/* binding */ enqueueQueryStringUpdate),\n/* harmony export */   getQueuedValue: () => (/* binding */ getQueuedValue),\n/* harmony export */   resetQueue: () => (/* binding */ resetQueue),\n/* harmony export */   safeParse: () => (/* binding */ safeParse),\n/* harmony export */   scheduleFlushToURL: () => (/* binding */ scheduleFlushToURL)\n/* harmony export */ });\n/* harmony import */ var _chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5WWTJYGR.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\");\n\n\n// src/utils.ts\nfunction safeParse(parser, value, key) {\n  try {\n    return parser(value);\n  } catch (error2) {\n    (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.warn)(\n      \"[nuqs] Error while parsing value `%s`: %O\" + (key ? \" (for key `%s`)\" : \"\"),\n      value,\n      error2,\n      key\n    );\n    return null;\n  }\n}\nfunction getDefaultThrottle() {\n  if (typeof window === \"undefined\") return 50;\n  const isSafari = Boolean(window.GestureEvent);\n  if (!isSafari) {\n    return 50;\n  }\n  try {\n    const match = navigator.userAgent?.match(/version\\/([\\d\\.]+) safari/i);\n    return parseFloat(match[1]) >= 17 ? 120 : 320;\n  } catch {\n    return 320;\n  }\n}\n\n// src/update-queue.ts\nvar FLUSH_RATE_LIMIT_MS = getDefaultThrottle();\nvar updateQueue = /* @__PURE__ */ new Map();\nvar queueOptions = {\n  history: \"replace\",\n  scroll: false,\n  shallow: true,\n  throttleMs: FLUSH_RATE_LIMIT_MS\n};\nvar transitionsQueue = /* @__PURE__ */ new Set();\nvar lastFlushTimestamp = 0;\nvar flushPromiseCache = null;\nfunction getQueuedValue(key) {\n  return updateQueue.get(key);\n}\nfunction resetQueue() {\n  updateQueue.clear();\n  transitionsQueue.clear();\n  queueOptions.history = \"replace\";\n  queueOptions.scroll = false;\n  queueOptions.shallow = true;\n  queueOptions.throttleMs = FLUSH_RATE_LIMIT_MS;\n}\nfunction enqueueQueryStringUpdate(key, value, serialize, options) {\n  const serializedOrNull = value === null ? null : serialize(value);\n  (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.debug)(\"[nuqs queue] Enqueueing %s=%s %O\", key, serializedOrNull, options);\n  updateQueue.set(key, serializedOrNull);\n  if (options.history === \"push\") {\n    queueOptions.history = \"push\";\n  }\n  if (options.scroll) {\n    queueOptions.scroll = true;\n  }\n  if (options.shallow === false) {\n    queueOptions.shallow = false;\n  }\n  if (options.startTransition) {\n    transitionsQueue.add(options.startTransition);\n  }\n  queueOptions.throttleMs = Math.max(\n    options.throttleMs ?? FLUSH_RATE_LIMIT_MS,\n    Number.isFinite(queueOptions.throttleMs) ? queueOptions.throttleMs : 0\n  );\n  return serializedOrNull;\n}\nfunction getSearchParamsSnapshotFromLocation() {\n  return new URLSearchParams(location.search);\n}\nfunction scheduleFlushToURL({\n  getSearchParamsSnapshot = getSearchParamsSnapshotFromLocation,\n  updateUrl,\n  rateLimitFactor = 1\n}) {\n  if (flushPromiseCache === null) {\n    flushPromiseCache = new Promise((resolve, reject) => {\n      if (!Number.isFinite(queueOptions.throttleMs)) {\n        (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.debug)(\"[nuqs queue] Skipping flush due to throttleMs=Infinity\");\n        resolve(getSearchParamsSnapshot());\n        setTimeout(() => {\n          flushPromiseCache = null;\n        }, 0);\n        return;\n      }\n      function flushNow() {\n        lastFlushTimestamp = performance.now();\n        const [search, error2] = flushUpdateQueue({\n          updateUrl,\n          getSearchParamsSnapshot\n        });\n        if (error2 === null) {\n          resolve(search);\n        } else {\n          reject(search);\n        }\n        flushPromiseCache = null;\n      }\n      function runOnNextTick() {\n        const now = performance.now();\n        const timeSinceLastFlush = now - lastFlushTimestamp;\n        const throttleMs = queueOptions.throttleMs;\n        const flushInMs = rateLimitFactor * Math.max(0, Math.min(throttleMs, throttleMs - timeSinceLastFlush));\n        (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.debug)(\n          \"[nuqs queue] Scheduling flush in %f ms. Throttled at %f ms\",\n          flushInMs,\n          throttleMs\n        );\n        if (flushInMs === 0) {\n          flushNow();\n        } else {\n          setTimeout(flushNow, flushInMs);\n        }\n      }\n      setTimeout(runOnNextTick, 0);\n    });\n  }\n  return flushPromiseCache;\n}\nfunction flushUpdateQueue({\n  updateUrl,\n  getSearchParamsSnapshot\n}) {\n  const search = getSearchParamsSnapshot();\n  if (updateQueue.size === 0) {\n    return [search, null];\n  }\n  const items = Array.from(updateQueue.entries());\n  const options = { ...queueOptions };\n  const transitions = Array.from(transitionsQueue);\n  resetQueue();\n  (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.debug)(\"[nuqs queue] Flushing queue %O with options %O\", items, options);\n  for (const [key, value] of items) {\n    if (value === null) {\n      search.delete(key);\n    } else {\n      search.set(key, value);\n    }\n  }\n  try {\n    compose(transitions, () => {\n      updateUrl(search, {\n        history: options.history,\n        scroll: options.scroll,\n        shallow: options.shallow\n      });\n    });\n    return [search, null];\n  } catch (err) {\n    console.error((0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_0__.error)(429), items.map(([key]) => key).join(), err);\n    return [search, err];\n  }\n}\nfunction compose(fns, final) {\n  const recursiveCompose = (index) => {\n    if (index === fns.length) {\n      return final();\n    }\n    const fn = fns[index];\n    if (!fn) {\n      throw new Error(\"Invalid transition function\");\n    }\n    fn(() => recursiveCompose(index + 1));\n  };\n  recursiveCompose(0);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6YKAEXDW.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-ZOGZRKNA.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-ZOGZRKNA.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useNuqsNextAppRouterAdapter: () => (/* binding */ useNuqsNextAppRouterAdapter)\n/* harmony export */ });\n/* harmony import */ var _chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-5WWTJYGR.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\nfunction useNuqsNextAppRouterAdapter() {\n  const router = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n  const searchParams = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)();\n  const [optimisticSearchParams, setOptimisticSearchParams] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useOptimistic)(searchParams);\n  const updateUrl = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((search, options) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n      if (!options.shallow) {\n        setOptimisticSearchParams(search);\n      }\n      const url = renderURL(location.origin + location.pathname, search);\n      (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.debug)(\"[nuqs queue (app)] Updating url: %s\", url);\n      const updateMethod = options.history === \"push\" ? history.pushState : history.replaceState;\n      updateMethod.call(\n        history,\n        // In next@14.1.0, useSearchParams becomes reactive to shallow updates,\n        // but only if passing `null` as the history state.\n        null,\n        \"\",\n        url\n      );\n      if (options.scroll) {\n        window.scrollTo(0, 0);\n      }\n      if (!options.shallow) {\n        router.replace(url, {\n          scroll: false\n        });\n      }\n    });\n  }, []);\n  return {\n    searchParams: optimisticSearchParams,\n    updateUrl,\n    // See: https://github.com/47ng/nuqs/issues/603#issuecomment-2317057128\n    // and https://github.com/47ng/nuqs/discussions/960#discussioncomment-12699171\n    rateLimitFactor: 3\n  };\n}\nfunction renderURL(base, search) {\n  const hashlessBase = base.split(\"#\")[0] ?? \"\";\n  const query = (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_2__.renderQueryString)(search);\n  const hash = location.hash;\n  return hashlessBase + query + hash;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL251cXMvZGlzdC9jaHVuay1aT0daUktOQS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStEO0FBQ0M7QUFDSTs7QUFFcEU7QUFDQSxpQkFBaUIsNkRBQVM7QUFDMUIsdUJBQXVCLG1FQUFlO0FBQ3RDLDhEQUE4RCxvREFBYTtBQUMzRSxvQkFBb0Isa0RBQVc7QUFDL0IsSUFBSSxzREFBZTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0seURBQUs7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFFQUFpQjtBQUNqQztBQUNBO0FBQ0E7O0FBRXVDIiwic291cmNlcyI6WyJGOlxcY29kZVxccm9kX3plbVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcbnVxc0AyLjQuM19uZXh0QDE1LjMuNF9yZWFjdEAxOS4xLjBcXG5vZGVfbW9kdWxlc1xcbnVxc1xcZGlzdFxcY2h1bmstWk9HWlJLTkEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVidWcsIHJlbmRlclF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi9jaHVuay01V1dUSllHUi5qcyc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIsIHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gJ25leHQvbmF2aWdhdGlvbi5qcyc7XG5pbXBvcnQgeyB1c2VPcHRpbWlzdGljLCB1c2VDYWxsYmFjaywgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VOdXFzTmV4dEFwcFJvdXRlckFkYXB0ZXIoKSB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBzZWFyY2hQYXJhbXMgPSB1c2VTZWFyY2hQYXJhbXMoKTtcbiAgY29uc3QgW29wdGltaXN0aWNTZWFyY2hQYXJhbXMsIHNldE9wdGltaXN0aWNTZWFyY2hQYXJhbXNdID0gdXNlT3B0aW1pc3RpYyhzZWFyY2hQYXJhbXMpO1xuICBjb25zdCB1cGRhdGVVcmwgPSB1c2VDYWxsYmFjaygoc2VhcmNoLCBvcHRpb25zKSA9PiB7XG4gICAgc3RhcnRUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgIGlmICghb3B0aW9ucy5zaGFsbG93KSB7XG4gICAgICAgIHNldE9wdGltaXN0aWNTZWFyY2hQYXJhbXMoc2VhcmNoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVybCA9IHJlbmRlclVSTChsb2NhdGlvbi5vcmlnaW4gKyBsb2NhdGlvbi5wYXRobmFtZSwgc2VhcmNoKTtcbiAgICAgIGRlYnVnKFwiW251cXMgcXVldWUgKGFwcCldIFVwZGF0aW5nIHVybDogJXNcIiwgdXJsKTtcbiAgICAgIGNvbnN0IHVwZGF0ZU1ldGhvZCA9IG9wdGlvbnMuaGlzdG9yeSA9PT0gXCJwdXNoXCIgPyBoaXN0b3J5LnB1c2hTdGF0ZSA6IGhpc3RvcnkucmVwbGFjZVN0YXRlO1xuICAgICAgdXBkYXRlTWV0aG9kLmNhbGwoXG4gICAgICAgIGhpc3RvcnksXG4gICAgICAgIC8vIEluIG5leHRAMTQuMS4wLCB1c2VTZWFyY2hQYXJhbXMgYmVjb21lcyByZWFjdGl2ZSB0byBzaGFsbG93IHVwZGF0ZXMsXG4gICAgICAgIC8vIGJ1dCBvbmx5IGlmIHBhc3NpbmcgYG51bGxgIGFzIHRoZSBoaXN0b3J5IHN0YXRlLlxuICAgICAgICBudWxsLFxuICAgICAgICBcIlwiLFxuICAgICAgICB1cmxcbiAgICAgICk7XG4gICAgICBpZiAob3B0aW9ucy5zY3JvbGwpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHRpb25zLnNoYWxsb3cpIHtcbiAgICAgICAgcm91dGVyLnJlcGxhY2UodXJsLCB7XG4gICAgICAgICAgc2Nyb2xsOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW10pO1xuICByZXR1cm4ge1xuICAgIHNlYXJjaFBhcmFtczogb3B0aW1pc3RpY1NlYXJjaFBhcmFtcyxcbiAgICB1cGRhdGVVcmwsXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vNDduZy9udXFzL2lzc3Vlcy82MDMjaXNzdWVjb21tZW50LTIzMTcwNTcxMjhcbiAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tLzQ3bmcvbnVxcy9kaXNjdXNzaW9ucy85NjAjZGlzY3Vzc2lvbmNvbW1lbnQtMTI2OTkxNzFcbiAgICByYXRlTGltaXRGYWN0b3I6IDNcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbmRlclVSTChiYXNlLCBzZWFyY2gpIHtcbiAgY29uc3QgaGFzaGxlc3NCYXNlID0gYmFzZS5zcGxpdChcIiNcIilbMF0gPz8gXCJcIjtcbiAgY29uc3QgcXVlcnkgPSByZW5kZXJRdWVyeVN0cmluZyhzZWFyY2gpO1xuICBjb25zdCBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgcmV0dXJuIGhhc2hsZXNzQmFzZSArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuZXhwb3J0IHsgdXNlTnVxc05leHRBcHBSb3V0ZXJBZGFwdGVyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-ZOGZRKNA.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLoader: () => (/* binding */ createLoader),\n/* harmony export */   createParser: () => (/* binding */ createParser),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer),\n/* harmony export */   parseAsArrayOf: () => (/* binding */ parseAsArrayOf),\n/* harmony export */   parseAsBoolean: () => (/* binding */ parseAsBoolean),\n/* harmony export */   parseAsFloat: () => (/* binding */ parseAsFloat),\n/* harmony export */   parseAsHex: () => (/* binding */ parseAsHex),\n/* harmony export */   parseAsIndex: () => (/* binding */ parseAsIndex),\n/* harmony export */   parseAsInteger: () => (/* binding */ parseAsInteger),\n/* harmony export */   parseAsIsoDate: () => (/* binding */ parseAsIsoDate),\n/* harmony export */   parseAsIsoDateTime: () => (/* binding */ parseAsIsoDateTime),\n/* harmony export */   parseAsJson: () => (/* binding */ parseAsJson),\n/* harmony export */   parseAsNumberLiteral: () => (/* binding */ parseAsNumberLiteral),\n/* harmony export */   parseAsString: () => (/* binding */ parseAsString),\n/* harmony export */   parseAsStringEnum: () => (/* binding */ parseAsStringEnum),\n/* harmony export */   parseAsStringLiteral: () => (/* binding */ parseAsStringLiteral),\n/* harmony export */   parseAsTimestamp: () => (/* binding */ parseAsTimestamp),\n/* harmony export */   useQueryState: () => (/* binding */ useQueryState),\n/* harmony export */   useQueryStates: () => (/* binding */ useQueryStates)\n/* harmony export */ });\n/* harmony import */ var _chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-6YKAEXDW.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-6YKAEXDW.js\");\n/* harmony import */ var _chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-5WWTJYGR.js */ \"(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/chunk-5WWTJYGR.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var mitt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mitt */ \"(ssr)/./node_modules/.pnpm/mitt@3.0.1/node_modules/mitt/dist/mitt.mjs\");\n/* __next_internal_client_entry_do_not_use__ createLoader,createParser,createSerializer,parseAsArrayOf,parseAsBoolean,parseAsFloat,parseAsHex,parseAsIndex,parseAsInteger,parseAsIsoDate,parseAsIsoDateTime,parseAsJson,parseAsNumberLiteral,parseAsString,parseAsStringEnum,parseAsStringLiteral,parseAsTimestamp,useQueryState,useQueryStates auto */ \n\n\n\n// src/loader.ts\nfunction createLoader(parsers, { urlKeys = {} } = {}) {\n    function loadSearchParams(input) {\n        if (input instanceof Promise) {\n            return input.then((i)=>loadSearchParams(i));\n        }\n        const searchParams = extractSearchParams(input);\n        const result = {};\n        for (const [key, parser] of Object.entries(parsers)){\n            const urlKey = urlKeys[key] ?? key;\n            const value = searchParams.get(urlKey);\n            result[key] = parser.parseServerSide(value ?? void 0);\n        }\n        return result;\n    }\n    return loadSearchParams;\n}\nfunction extractSearchParams(input) {\n    try {\n        if (input instanceof Request) {\n            if (input.url) {\n                return new URL(input.url).searchParams;\n            } else {\n                return new URLSearchParams();\n            }\n        }\n        if (input instanceof URL) {\n            return input.searchParams;\n        }\n        if (input instanceof URLSearchParams) {\n            return input;\n        }\n        if (typeof input === \"object\") {\n            const entries = Object.entries(input);\n            const searchParams = new URLSearchParams();\n            for (const [key, value] of entries){\n                if (Array.isArray(value)) {\n                    for (const v of value){\n                        searchParams.append(key, v);\n                    }\n                } else if (value !== void 0) {\n                    searchParams.set(key, value);\n                }\n            }\n            return searchParams;\n        }\n        if (typeof input === \"string\") {\n            if (\"canParse\" in URL && URL.canParse(input)) {\n                return new URL(input).searchParams;\n            }\n            return new URLSearchParams(input);\n        }\n    } catch (e) {\n        return new URLSearchParams();\n    }\n    return new URLSearchParams();\n}\n// src/parsers.ts\nfunction createParser(parser) {\n    function parseServerSideNullable(value) {\n        if (typeof value === \"undefined\") {\n            return null;\n        }\n        let str = \"\";\n        if (Array.isArray(value)) {\n            if (value[0] === void 0) {\n                return null;\n            }\n            str = value[0];\n        }\n        if (typeof value === \"string\") {\n            str = value;\n        }\n        return (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.safeParse)(parser.parse, str);\n    }\n    return {\n        eq: (a, b)=>a === b,\n        ...parser,\n        parseServerSide: parseServerSideNullable,\n        withDefault (defaultValue) {\n            return {\n                ...this,\n                defaultValue,\n                parseServerSide (value) {\n                    return parseServerSideNullable(value) ?? defaultValue;\n                }\n            };\n        },\n        withOptions (options) {\n            return {\n                ...this,\n                ...options\n            };\n        }\n    };\n}\nvar parseAsString = createParser({\n    parse: (v)=>v,\n    serialize: (v)=>`${v}`\n});\nvar parseAsInteger = createParser({\n    parse: (v)=>{\n        const int = parseInt(v);\n        if (Number.isNaN(int)) {\n            return null;\n        }\n        return int;\n    },\n    serialize: (v)=>Math.round(v).toFixed()\n});\nvar parseAsIndex = createParser({\n    parse: (v)=>{\n        const int = parseAsInteger.parse(v);\n        if (int === null) {\n            return null;\n        }\n        return int - 1;\n    },\n    serialize: (v)=>parseAsInteger.serialize(v + 1)\n});\nvar parseAsHex = createParser({\n    parse: (v)=>{\n        const int = parseInt(v, 16);\n        if (Number.isNaN(int)) {\n            return null;\n        }\n        return int;\n    },\n    serialize: (v)=>{\n        const hex = Math.round(v).toString(16);\n        return hex.padStart(hex.length + hex.length % 2, \"0\");\n    }\n});\nvar parseAsFloat = createParser({\n    parse: (v)=>{\n        const float = parseFloat(v);\n        if (Number.isNaN(float)) {\n            return null;\n        }\n        return float;\n    },\n    serialize: (v)=>v.toString()\n});\nvar parseAsBoolean = createParser({\n    parse: (v)=>v === \"true\",\n    serialize: (v)=>v ? \"true\" : \"false\"\n});\nfunction compareDates(a, b) {\n    return a.valueOf() === b.valueOf();\n}\nvar parseAsTimestamp = createParser({\n    parse: (v)=>{\n        const ms = parseInt(v);\n        if (Number.isNaN(ms)) {\n            return null;\n        }\n        return new Date(ms);\n    },\n    serialize: (v)=>v.valueOf().toString(),\n    eq: compareDates\n});\nvar parseAsIsoDateTime = createParser({\n    parse: (v)=>{\n        const date = new Date(v);\n        if (Number.isNaN(date.valueOf())) {\n            return null;\n        }\n        return date;\n    },\n    serialize: (v)=>v.toISOString(),\n    eq: compareDates\n});\nvar parseAsIsoDate = createParser({\n    parse: (v)=>{\n        const date = new Date(v.slice(0, 10));\n        if (Number.isNaN(date.valueOf())) {\n            return null;\n        }\n        return date;\n    },\n    serialize: (v)=>v.toISOString().slice(0, 10),\n    eq: compareDates\n});\nfunction parseAsStringEnum(validValues) {\n    return createParser({\n        parse: (query)=>{\n            const asEnum = query;\n            if (validValues.includes(asEnum)) {\n                return asEnum;\n            }\n            return null;\n        },\n        serialize: (value)=>value.toString()\n    });\n}\nfunction parseAsStringLiteral(validValues) {\n    return createParser({\n        parse: (query)=>{\n            const asConst = query;\n            if (validValues.includes(asConst)) {\n                return asConst;\n            }\n            return null;\n        },\n        serialize: (value)=>value.toString()\n    });\n}\nfunction parseAsNumberLiteral(validValues) {\n    return createParser({\n        parse: (query)=>{\n            const asConst = parseFloat(query);\n            if (validValues.includes(asConst)) {\n                return asConst;\n            }\n            return null;\n        },\n        serialize: (value)=>value.toString()\n    });\n}\nfunction parseAsJson(runtimeParser) {\n    return createParser({\n        parse: (query)=>{\n            try {\n                const obj = JSON.parse(query);\n                return runtimeParser(obj);\n            } catch  {\n                return null;\n            }\n        },\n        serialize: (value)=>JSON.stringify(value),\n        eq (a, b) {\n            return a === b || JSON.stringify(a) === JSON.stringify(b);\n        }\n    });\n}\nfunction parseAsArrayOf(itemParser, separator = \",\") {\n    const itemEq = itemParser.eq ?? ((a, b)=>a === b);\n    const encodedSeparator = encodeURIComponent(separator);\n    return createParser({\n        parse: (query)=>{\n            if (query === \"\") {\n                return [];\n            }\n            return query.split(separator).map((item, index)=>(0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.safeParse)(itemParser.parse, item.replaceAll(encodedSeparator, separator), `[${index}]`)).filter((value)=>value !== null && value !== void 0);\n        },\n        serialize: (values)=>values.map((value)=>{\n                const str = itemParser.serialize ? itemParser.serialize(value) : String(value);\n                return str.replaceAll(separator, encodedSeparator);\n            }).join(separator),\n        eq (a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (a.length !== b.length) {\n                return false;\n            }\n            return a.every((value, index)=>itemEq(value, b[index]));\n        }\n    });\n}\n// src/serializer.ts\nfunction createSerializer(parsers, { clearOnDefault = true, urlKeys = {} } = {}) {\n    function serialize(arg1BaseOrValues, arg2values = {}) {\n        const [base, search] = isBase(arg1BaseOrValues) ? splitBase(arg1BaseOrValues) : [\n            \"\",\n            new URLSearchParams()\n        ];\n        const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues;\n        if (values === null) {\n            for(const key in parsers){\n                const urlKey = urlKeys[key] ?? key;\n                search.delete(urlKey);\n            }\n            return base + (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.renderQueryString)(search);\n        }\n        for(const key in parsers){\n            const parser = parsers[key];\n            const value = values[key];\n            if (!parser || value === void 0) {\n                continue;\n            }\n            const urlKey = urlKeys[key] ?? key;\n            const isMatchingDefault = parser.defaultValue !== void 0 && (parser.eq ?? ((a, b)=>a === b))(value, parser.defaultValue);\n            if (value === null || (parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault) {\n                search.delete(urlKey);\n            } else {\n                search.set(urlKey, parser.serialize(value));\n            }\n        }\n        return base + (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.renderQueryString)(search);\n    }\n    return serialize;\n}\nfunction isBase(base) {\n    return typeof base === \"string\" || base instanceof URLSearchParams || base instanceof URL;\n}\nfunction splitBase(base) {\n    if (typeof base === \"string\") {\n        const [path = \"\", ...search] = base.split(\"?\");\n        return [\n            path,\n            new URLSearchParams(search.join(\"?\"))\n        ];\n    } else if (base instanceof URLSearchParams) {\n        return [\n            \"\",\n            new URLSearchParams(base)\n        ];\n    } else {\n        return [\n            base.origin + base.pathname,\n            new URLSearchParams(base.searchParams)\n        ];\n    }\n}\nvar emitter = (0,mitt__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n// src/useQueryState.ts\nfunction useQueryState(key, { history = \"replace\", shallow = true, scroll = false, throttleMs = _chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.FLUSH_RATE_LIMIT_MS, parse = (x)=>x, serialize = String, eq = (a, b)=>a === b, defaultValue = void 0, clearOnDefault = true, startTransition } = {\n    history: \"replace\",\n    scroll: false,\n    shallow: true,\n    throttleMs: _chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.FLUSH_RATE_LIMIT_MS,\n    parse: (x)=>x,\n    serialize: String,\n    eq: (a, b)=>a === b,\n    clearOnDefault: true,\n    defaultValue: void 0\n}) {\n    const adapter = (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.useAdapter)();\n    const initialSearchParams = adapter.searchParams;\n    const queryRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialSearchParams?.get(key) ?? null);\n    const [internalState, setInternalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useQueryState.useState\": ()=>{\n            const queuedQuery = (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.getQueuedValue)(key);\n            const query = queuedQuery === void 0 ? initialSearchParams?.get(key) ?? null : queuedQuery;\n            return query === null ? null : (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.safeParse)(parse, query, key);\n        }\n    }[\"useQueryState.useState\"]);\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(internalState);\n    (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuqs `%s`] render - state: %O, iSP: %s\", key, internalState, initialSearchParams?.get(key) ?? null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryState.useEffect\": ()=>{\n            const query = initialSearchParams?.get(key) ?? null;\n            if (query === queryRef.current) {\n                return;\n            }\n            const state = query === null ? null : (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.safeParse)(parse, query, key);\n            (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuqs `%s`] syncFromUseSearchParams %O\", key, state);\n            stateRef.current = state;\n            queryRef.current = query;\n            setInternalState(state);\n        }\n    }[\"useQueryState.useEffect\"], [\n        initialSearchParams?.get(key),\n        key\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryState.useEffect\": ()=>{\n            function updateInternalState({ state, query }) {\n                (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuqs `%s`] updateInternalState %O\", key, state);\n                stateRef.current = state;\n                queryRef.current = query;\n                setInternalState(state);\n            }\n            (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuqs `%s`] subscribing to sync\", key);\n            emitter.on(key, updateInternalState);\n            return ({\n                \"useQueryState.useEffect\": ()=>{\n                    (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuqs `%s`] unsubscribing from sync\", key);\n                    emitter.off(key, updateInternalState);\n                }\n            })[\"useQueryState.useEffect\"];\n        }\n    }[\"useQueryState.useEffect\"], [\n        key\n    ]);\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useQueryState.useCallback[update]\": (stateUpdater, options = {})=>{\n            let newValue = isUpdaterFunction(stateUpdater) ? stateUpdater(stateRef.current ?? defaultValue ?? null) : stateUpdater;\n            if ((options.clearOnDefault ?? clearOnDefault) && newValue !== null && defaultValue !== void 0 && eq(newValue, defaultValue)) {\n                newValue = null;\n            }\n            const query = (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.enqueueQueryStringUpdate)(key, newValue, serialize, {\n                // Call-level options take precedence over hook declaration options.\n                history: options.history ?? history,\n                shallow: options.shallow ?? shallow,\n                scroll: options.scroll ?? scroll,\n                throttleMs: options.throttleMs ?? throttleMs,\n                startTransition: options.startTransition ?? startTransition\n            });\n            emitter.emit(key, {\n                state: newValue,\n                query\n            });\n            return (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.scheduleFlushToURL)(adapter);\n        }\n    }[\"useQueryState.useCallback[update]\"], [\n        key,\n        history,\n        shallow,\n        scroll,\n        throttleMs,\n        startTransition,\n        adapter.updateUrl,\n        adapter.getSearchParamsSnapshot,\n        adapter.rateLimitFactor\n    ]);\n    return [\n        internalState ?? defaultValue ?? null,\n        update\n    ];\n}\nfunction isUpdaterFunction(stateUpdater) {\n    return typeof stateUpdater === \"function\";\n}\nvar defaultUrlKeys = {};\nfunction useQueryStates(keyMap, { history = \"replace\", scroll = false, shallow = true, throttleMs = _chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.FLUSH_RATE_LIMIT_MS, clearOnDefault = true, startTransition, urlKeys = defaultUrlKeys } = {}) {\n    const stateKeys = Object.keys(keyMap).join(\",\");\n    const resolvedUrlKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[resolvedUrlKeys]\": ()=>Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useMemo[resolvedUrlKeys]\": (key)=>[\n                        key,\n                        urlKeys[key] ?? key\n                    ]\n            }[\"useQueryStates.useMemo[resolvedUrlKeys]\"]))\n    }[\"useQueryStates.useMemo[resolvedUrlKeys]\"], [\n        stateKeys,\n        JSON.stringify(urlKeys)\n    ]);\n    const adapter = (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.useAdapter)();\n    const initialSearchParams = adapter.searchParams;\n    const queryRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const defaultValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[defaultValues]\": ()=>Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useMemo[defaultValues]\": (key)=>[\n                        key,\n                        keyMap[key].defaultValue ?? null\n                    ]\n            }[\"useQueryStates.useMemo[defaultValues]\"]))\n    }[\"useQueryStates.useMemo[defaultValues]\"], [\n        Object.values(keyMap).map({\n            \"useQueryStates.useMemo[defaultValues]\": ({ defaultValue })=>defaultValue\n        }[\"useQueryStates.useMemo[defaultValues]\"]).join(\",\")\n    ]);\n    const [internalState, setInternalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useQueryStates.useState\": ()=>{\n            const source = initialSearchParams ?? new URLSearchParams();\n            return parseMap(keyMap, urlKeys, source).state;\n        }\n    }[\"useQueryStates.useState\"]);\n    const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(internalState);\n    (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] render - state: %O, iSP: %s\", stateKeys, internalState, initialSearchParams);\n    if (Object.keys(queryRef.current).join(\"&\") !== Object.values(resolvedUrlKeys).join(\"&\")) {\n        const { state, hasChanged } = parseMap(keyMap, urlKeys, initialSearchParams, queryRef.current, stateRef.current);\n        if (hasChanged) {\n            stateRef.current = state;\n            setInternalState(state);\n        }\n        queryRef.current = Object.fromEntries(Object.values(resolvedUrlKeys).map((urlKey)=>[\n                urlKey,\n                initialSearchParams?.get(urlKey) ?? null\n            ]));\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryStates.useEffect\": ()=>{\n            const { state, hasChanged } = parseMap(keyMap, urlKeys, initialSearchParams, queryRef.current, stateRef.current);\n            if (hasChanged) {\n                stateRef.current = state;\n                setInternalState(state);\n            }\n        }\n    }[\"useQueryStates.useEffect\"], [\n        Object.values(resolvedUrlKeys).map({\n            \"useQueryStates.useEffect\": (key)=>`${key}=${initialSearchParams?.get(key)}`\n        }[\"useQueryStates.useEffect\"]).join(\"&\")\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useQueryStates.useEffect\": ()=>{\n            function updateInternalState(state) {\n                (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] updateInternalState %O\", stateKeys, state);\n                stateRef.current = state;\n                setInternalState(state);\n            }\n            const handlers = Object.keys(keyMap).reduce({\n                \"useQueryStates.useEffect.handlers\": (handlers2, stateKey)=>{\n                    handlers2[stateKey] = ({\n                        \"useQueryStates.useEffect.handlers\": ({ state, query })=>{\n                            const { defaultValue } = keyMap[stateKey];\n                            const urlKey = resolvedUrlKeys[stateKey];\n                            stateRef.current = {\n                                ...stateRef.current,\n                                [stateKey]: state ?? defaultValue ?? null\n                            };\n                            queryRef.current[urlKey] = query;\n                            (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] Cross-hook key sync %s: %O (default: %O). Resolved: %O\", stateKeys, urlKey, state, defaultValue, stateRef.current);\n                            updateInternalState(stateRef.current);\n                        }\n                    })[\"useQueryStates.useEffect.handlers\"];\n                    return handlers2;\n                }\n            }[\"useQueryStates.useEffect.handlers\"], {});\n            for (const stateKey of Object.keys(keyMap)){\n                const urlKey = resolvedUrlKeys[stateKey];\n                (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] Subscribing to sync for `%s`\", stateKeys, urlKey);\n                emitter.on(urlKey, handlers[stateKey]);\n            }\n            return ({\n                \"useQueryStates.useEffect\": ()=>{\n                    for (const stateKey of Object.keys(keyMap)){\n                        const urlKey = resolvedUrlKeys[stateKey];\n                        (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] Unsubscribing to sync for `%s`\", stateKeys, urlKey);\n                        emitter.off(urlKey, handlers[stateKey]);\n                    }\n                }\n            })[\"useQueryStates.useEffect\"];\n        }\n    }[\"useQueryStates.useEffect\"], [\n        stateKeys,\n        resolvedUrlKeys\n    ]);\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useQueryStates.useCallback[update]\": (stateUpdater, callOptions = {})=>{\n            const nullMap = Object.fromEntries(Object.keys(keyMap).map({\n                \"useQueryStates.useCallback[update].nullMap\": (key)=>[\n                        key,\n                        null\n                    ]\n            }[\"useQueryStates.useCallback[update].nullMap\"]));\n            const newState = typeof stateUpdater === \"function\" ? stateUpdater(applyDefaultValues(stateRef.current, defaultValues)) ?? nullMap : stateUpdater ?? nullMap;\n            (0,_chunk_5WWTJYGR_js__WEBPACK_IMPORTED_MODULE_3__.debug)(\"[nuq+ `%s`] setState: %O\", stateKeys, newState);\n            for (let [stateKey, value] of Object.entries(newState)){\n                const parser = keyMap[stateKey];\n                const urlKey = resolvedUrlKeys[stateKey];\n                if (!parser) {\n                    continue;\n                }\n                if ((callOptions.clearOnDefault ?? parser.clearOnDefault ?? clearOnDefault) && value !== null && parser.defaultValue !== void 0 && (parser.eq ?? ({\n                    \"useQueryStates.useCallback[update]\": (a, b)=>a === b\n                })[\"useQueryStates.useCallback[update]\"])(value, parser.defaultValue)) {\n                    value = null;\n                }\n                const query = (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.enqueueQueryStringUpdate)(urlKey, value, parser.serialize ?? String, {\n                    // Call-level options take precedence over individual parser options\n                    // which take precedence over global options\n                    history: callOptions.history ?? parser.history ?? history,\n                    shallow: callOptions.shallow ?? parser.shallow ?? shallow,\n                    scroll: callOptions.scroll ?? parser.scroll ?? scroll,\n                    throttleMs: callOptions.throttleMs ?? parser.throttleMs ?? throttleMs,\n                    startTransition: callOptions.startTransition ?? parser.startTransition ?? startTransition\n                });\n                emitter.emit(urlKey, {\n                    state: value,\n                    query\n                });\n            }\n            return (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.scheduleFlushToURL)(adapter);\n        }\n    }[\"useQueryStates.useCallback[update]\"], [\n        stateKeys,\n        history,\n        shallow,\n        scroll,\n        throttleMs,\n        startTransition,\n        resolvedUrlKeys,\n        adapter.updateUrl,\n        adapter.getSearchParamsSnapshot,\n        adapter.rateLimitFactor,\n        defaultValues\n    ]);\n    const outputState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useQueryStates.useMemo[outputState]\": ()=>applyDefaultValues(internalState, defaultValues)\n    }[\"useQueryStates.useMemo[outputState]\"], [\n        internalState,\n        defaultValues\n    ]);\n    return [\n        outputState,\n        update\n    ];\n}\nfunction parseMap(keyMap, urlKeys, searchParams, cachedQuery, cachedState) {\n    let hasChanged = false;\n    const state = Object.keys(keyMap).reduce((out, stateKey)=>{\n        const urlKey = urlKeys?.[stateKey] ?? stateKey;\n        const { parse } = keyMap[stateKey];\n        const queuedQuery = (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.getQueuedValue)(urlKey);\n        const query = queuedQuery === void 0 ? searchParams?.get(urlKey) ?? null : queuedQuery;\n        if (cachedQuery && cachedState && (cachedQuery[urlKey] ?? null) === query) {\n            out[stateKey] = cachedState[stateKey] ?? null;\n            return out;\n        }\n        hasChanged = true;\n        const value = query === null ? null : (0,_chunk_6YKAEXDW_js__WEBPACK_IMPORTED_MODULE_2__.safeParse)(parse, query, stateKey);\n        out[stateKey] = value ?? null;\n        if (cachedQuery) {\n            cachedQuery[urlKey] = query;\n        }\n        return out;\n    }, {});\n    if (!hasChanged) {\n        const keyMapKeys = Object.keys(keyMap);\n        const cachedStateKeys = Object.keys(cachedState ?? {});\n        hasChanged = keyMapKeys.length !== cachedStateKeys.length || keyMapKeys.some((key)=>!cachedStateKeys.includes(key));\n    }\n    return {\n        state,\n        hasChanged\n    };\n}\nfunction applyDefaultValues(state, defaults) {\n    return Object.fromEntries(Object.keys(state).map((key)=>[\n            key,\n            state[key] ?? defaults[key] ?? null\n        ]));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLoader: () => (/* binding */ createLoader),\n/* harmony export */   createParser: () => (/* binding */ createParser),\n/* harmony export */   createSearchParamsCache: () => (/* binding */ createSearchParamsCache),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer),\n/* harmony export */   parseAsArrayOf: () => (/* binding */ parseAsArrayOf),\n/* harmony export */   parseAsBoolean: () => (/* binding */ parseAsBoolean),\n/* harmony export */   parseAsFloat: () => (/* binding */ parseAsFloat),\n/* harmony export */   parseAsHex: () => (/* binding */ parseAsHex),\n/* harmony export */   parseAsIndex: () => (/* binding */ parseAsIndex),\n/* harmony export */   parseAsInteger: () => (/* binding */ parseAsInteger),\n/* harmony export */   parseAsIsoDate: () => (/* binding */ parseAsIsoDate),\n/* harmony export */   parseAsIsoDateTime: () => (/* binding */ parseAsIsoDateTime),\n/* harmony export */   parseAsJson: () => (/* binding */ parseAsJson),\n/* harmony export */   parseAsNumberLiteral: () => (/* binding */ parseAsNumberLiteral),\n/* harmony export */   parseAsString: () => (/* binding */ parseAsString),\n/* harmony export */   parseAsStringEnum: () => (/* binding */ parseAsStringEnum),\n/* harmony export */   parseAsStringLiteral: () => (/* binding */ parseAsStringLiteral),\n/* harmony export */   parseAsTimestamp: () => (/* binding */ parseAsTimestamp)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.3.4_@babel+core@7.28.0_react-dom@19.1.0_react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n// src/cache.ts\n\n// src/errors.ts\nvar errors = {\n  303: \"Multiple adapter contexts detected. This might happen in monorepos.\",\n  404: \"nuqs requires an adapter to work with your framework.\",\n  409: \"Multiple versions of the library are loaded. This may lead to unexpected behavior. Currently using `%s`, but `%s` (via the %s adapter) was about to load on top.\",\n  414: \"Max safe URL length exceeded. Some browsers may not be able to accept this URL. Consider limiting the amount of state stored in the URL.\",\n  429: \"URL update rate-limited by the browser. Consider increasing `throttleMs` for key(s) `%s`. %O\",\n  500: \"Empty search params cache. Search params can't be accessed in Layouts.\",\n  501: \"Search params cache already populated. Have you called `parse` twice?\"\n};\nfunction error(code) {\n  return `[nuqs] ${errors[code]}\n  See https://err.47ng.com/NUQS-${code}`;\n}\n\n// src/loader.ts\nfunction createLoader(parsers, { urlKeys = {} } = {}) {\n  function loadSearchParams(input) {\n    if (input instanceof Promise) {\n      return input.then((i) => loadSearchParams(i));\n    }\n    const searchParams = extractSearchParams(input);\n    const result = {};\n    for (const [key, parser] of Object.entries(parsers)) {\n      const urlKey = urlKeys[key] ?? key;\n      const value = searchParams.get(urlKey);\n      result[key] = parser.parseServerSide(value ?? void 0);\n    }\n    return result;\n  }\n  return loadSearchParams;\n}\nfunction extractSearchParams(input) {\n  try {\n    if (input instanceof Request) {\n      if (input.url) {\n        return new URL(input.url).searchParams;\n      } else {\n        return new URLSearchParams();\n      }\n    }\n    if (input instanceof URL) {\n      return input.searchParams;\n    }\n    if (input instanceof URLSearchParams) {\n      return input;\n    }\n    if (typeof input === \"object\") {\n      const entries = Object.entries(input);\n      const searchParams = new URLSearchParams();\n      for (const [key, value] of entries) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v);\n          }\n        } else if (value !== void 0) {\n          searchParams.set(key, value);\n        }\n      }\n      return searchParams;\n    }\n    if (typeof input === \"string\") {\n      if (\"canParse\" in URL && URL.canParse(input)) {\n        return new URL(input).searchParams;\n      }\n      return new URLSearchParams(input);\n    }\n  } catch (e) {\n    return new URLSearchParams();\n  }\n  return new URLSearchParams();\n}\n\n// src/cache.ts\nvar $input = Symbol(\"Input\");\nfunction createSearchParamsCache(parsers, { urlKeys = {} } = {}) {\n  const load = createLoader(parsers, { urlKeys });\n  const getCache = react__WEBPACK_IMPORTED_MODULE_0__.cache(() => ({\n    searchParams: {}\n  }));\n  function parseSync(searchParams) {\n    const c = getCache();\n    if (Object.isFrozen(c.searchParams)) {\n      if (c[$input] && compareSearchParams(searchParams, c[$input])) {\n        return all();\n      }\n      throw new Error(error(501));\n    }\n    c.searchParams = load(searchParams);\n    c[$input] = searchParams;\n    return Object.freeze(c.searchParams);\n  }\n  function parse(searchParams) {\n    if (searchParams instanceof Promise) {\n      return searchParams.then(parseSync);\n    }\n    return parseSync(searchParams);\n  }\n  function all() {\n    const { searchParams } = getCache();\n    if (Object.keys(searchParams).length === 0) {\n      throw new Error(error(500));\n    }\n    return searchParams;\n  }\n  function get(key) {\n    const { searchParams } = getCache();\n    const entry = searchParams[key];\n    if (typeof entry === \"undefined\") {\n      throw new Error(\n        error(500) + `\n  in get(${String(key)})`\n      );\n    }\n    return entry;\n  }\n  return { parse, get, all };\n}\nfunction compareSearchParams(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// src/debug.ts\nvar debugEnabled = isDebugEnabled();\nfunction warn(message, ...args) {\n  if (!debugEnabled) {\n    return;\n  }\n  console.warn(message, ...args);\n}\nfunction isDebugEnabled() {\n  try {\n    if (typeof localStorage === \"undefined\") {\n      return false;\n    }\n    const test = \"nuqs-localStorage-test\";\n    localStorage.setItem(test, test);\n    const isStorageAvailable = localStorage.getItem(test) === test;\n    localStorage.removeItem(test);\n    if (!isStorageAvailable) {\n      return false;\n    }\n  } catch (error2) {\n    console.error(\n      \"[nuqs]: debug mode is disabled (localStorage unavailable).\",\n      error2\n    );\n    return false;\n  }\n  const debug = localStorage.getItem(\"debug\") ?? \"\";\n  return debug.includes(\"nuqs\");\n}\n\n// src/utils.ts\nfunction safeParse(parser, value, key) {\n  try {\n    return parser(value);\n  } catch (error2) {\n    warn(\n      \"[nuqs] Error while parsing value `%s`: %O\" + (key ? \" (for key `%s`)\" : \"\"),\n      value,\n      error2,\n      key\n    );\n    return null;\n  }\n}\n\n// src/parsers.ts\nfunction createParser(parser) {\n  function parseServerSideNullable(value) {\n    if (typeof value === \"undefined\") {\n      return null;\n    }\n    let str = \"\";\n    if (Array.isArray(value)) {\n      if (value[0] === void 0) {\n        return null;\n      }\n      str = value[0];\n    }\n    if (typeof value === \"string\") {\n      str = value;\n    }\n    return safeParse(parser.parse, str);\n  }\n  return {\n    eq: (a, b) => a === b,\n    ...parser,\n    parseServerSide: parseServerSideNullable,\n    withDefault(defaultValue) {\n      return {\n        ...this,\n        defaultValue,\n        parseServerSide(value) {\n          return parseServerSideNullable(value) ?? defaultValue;\n        }\n      };\n    },\n    withOptions(options) {\n      return {\n        ...this,\n        ...options\n      };\n    }\n  };\n}\nvar parseAsString = createParser({\n  parse: (v) => v,\n  serialize: (v) => `${v}`\n});\nvar parseAsInteger = createParser({\n  parse: (v) => {\n    const int = parseInt(v);\n    if (Number.isNaN(int)) {\n      return null;\n    }\n    return int;\n  },\n  serialize: (v) => Math.round(v).toFixed()\n});\nvar parseAsIndex = createParser({\n  parse: (v) => {\n    const int = parseAsInteger.parse(v);\n    if (int === null) {\n      return null;\n    }\n    return int - 1;\n  },\n  serialize: (v) => parseAsInteger.serialize(v + 1)\n});\nvar parseAsHex = createParser({\n  parse: (v) => {\n    const int = parseInt(v, 16);\n    if (Number.isNaN(int)) {\n      return null;\n    }\n    return int;\n  },\n  serialize: (v) => {\n    const hex = Math.round(v).toString(16);\n    return hex.padStart(hex.length + hex.length % 2, \"0\");\n  }\n});\nvar parseAsFloat = createParser({\n  parse: (v) => {\n    const float = parseFloat(v);\n    if (Number.isNaN(float)) {\n      return null;\n    }\n    return float;\n  },\n  serialize: (v) => v.toString()\n});\nvar parseAsBoolean = createParser({\n  parse: (v) => v === \"true\",\n  serialize: (v) => v ? \"true\" : \"false\"\n});\nfunction compareDates(a, b) {\n  return a.valueOf() === b.valueOf();\n}\nvar parseAsTimestamp = createParser({\n  parse: (v) => {\n    const ms = parseInt(v);\n    if (Number.isNaN(ms)) {\n      return null;\n    }\n    return new Date(ms);\n  },\n  serialize: (v) => v.valueOf().toString(),\n  eq: compareDates\n});\nvar parseAsIsoDateTime = createParser({\n  parse: (v) => {\n    const date = new Date(v);\n    if (Number.isNaN(date.valueOf())) {\n      return null;\n    }\n    return date;\n  },\n  serialize: (v) => v.toISOString(),\n  eq: compareDates\n});\nvar parseAsIsoDate = createParser({\n  parse: (v) => {\n    const date = new Date(v.slice(0, 10));\n    if (Number.isNaN(date.valueOf())) {\n      return null;\n    }\n    return date;\n  },\n  serialize: (v) => v.toISOString().slice(0, 10),\n  eq: compareDates\n});\nfunction parseAsStringEnum(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asEnum = query;\n      if (validValues.includes(asEnum)) {\n        return asEnum;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsStringLiteral(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asConst = query;\n      if (validValues.includes(asConst)) {\n        return asConst;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsNumberLiteral(validValues) {\n  return createParser({\n    parse: (query) => {\n      const asConst = parseFloat(query);\n      if (validValues.includes(asConst)) {\n        return asConst;\n      }\n      return null;\n    },\n    serialize: (value) => value.toString()\n  });\n}\nfunction parseAsJson(runtimeParser) {\n  return createParser({\n    parse: (query) => {\n      try {\n        const obj = JSON.parse(query);\n        return runtimeParser(obj);\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq(a, b) {\n      return a === b || JSON.stringify(a) === JSON.stringify(b);\n    }\n  });\n}\nfunction parseAsArrayOf(itemParser, separator = \",\") {\n  const itemEq = itemParser.eq ?? ((a, b) => a === b);\n  const encodedSeparator = encodeURIComponent(separator);\n  return createParser({\n    parse: (query) => {\n      if (query === \"\") {\n        return [];\n      }\n      return query.split(separator).map(\n        (item, index) => safeParse(\n          itemParser.parse,\n          item.replaceAll(encodedSeparator, separator),\n          `[${index}]`\n        )\n      ).filter((value) => value !== null && value !== void 0);\n    },\n    serialize: (values) => values.map((value) => {\n      const str = itemParser.serialize ? itemParser.serialize(value) : String(value);\n      return str.replaceAll(separator, encodedSeparator);\n    }).join(separator),\n    eq(a, b) {\n      if (a === b) {\n        return true;\n      }\n      if (a.length !== b.length) {\n        return false;\n      }\n      return a.every((value, index) => itemEq(value, b[index]));\n    }\n  });\n}\n\n// src/url-encoding.ts\nfunction renderQueryString(search) {\n  if (search.size === 0) {\n    return \"\";\n  }\n  const query = [];\n  for (const [key, value] of search.entries()) {\n    const safeKey = key.replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\\+/g, \"%2B\").replace(/=/g, \"%3D\").replace(/\\?/g, \"%3F\");\n    query.push(`${safeKey}=${encodeQueryValue(value)}`);\n  }\n  const queryString = \"?\" + query.join(\"&\");\n  warnIfURLIsTooLong(queryString);\n  return queryString;\n}\nfunction encodeQueryValue(input) {\n  return input.replace(/%/g, \"%25\").replace(/\\+/g, \"%2B\").replace(/ /g, \"+\").replace(/#/g, \"%23\").replace(/&/g, \"%26\").replace(/\"/g, \"%22\").replace(/'/g, \"%27\").replace(/`/g, \"%60\").replace(/</g, \"%3C\").replace(/>/g, \"%3E\").replace(/[\\x00-\\x1F]/g, (char) => encodeURIComponent(char));\n}\nvar URL_MAX_LENGTH = 2e3;\nfunction warnIfURLIsTooLong(queryString) {\n  if (false) {}\n  if (typeof location === \"undefined\") {\n    return;\n  }\n  const url = new URL(location.href);\n  url.search = queryString;\n  if (url.href.length > URL_MAX_LENGTH) {\n    console.warn(error(414));\n  }\n}\n\n// src/serializer.ts\nfunction createSerializer(parsers, {\n  clearOnDefault = true,\n  urlKeys = {}\n} = {}) {\n  function serialize(arg1BaseOrValues, arg2values = {}) {\n    const [base, search] = isBase(arg1BaseOrValues) ? splitBase(arg1BaseOrValues) : [\"\", new URLSearchParams()];\n    const values = isBase(arg1BaseOrValues) ? arg2values : arg1BaseOrValues;\n    if (values === null) {\n      for (const key in parsers) {\n        const urlKey = urlKeys[key] ?? key;\n        search.delete(urlKey);\n      }\n      return base + renderQueryString(search);\n    }\n    for (const key in parsers) {\n      const parser = parsers[key];\n      const value = values[key];\n      if (!parser || value === void 0) {\n        continue;\n      }\n      const urlKey = urlKeys[key] ?? key;\n      const isMatchingDefault = parser.defaultValue !== void 0 && (parser.eq ?? ((a, b) => a === b))(value, parser.defaultValue);\n      if (value === null || (parser.clearOnDefault ?? clearOnDefault ?? true) && isMatchingDefault) {\n        search.delete(urlKey);\n      } else {\n        search.set(urlKey, parser.serialize(value));\n      }\n    }\n    return base + renderQueryString(search);\n  }\n  return serialize;\n}\nfunction isBase(base) {\n  return typeof base === \"string\" || base instanceof URLSearchParams || base instanceof URL;\n}\nfunction splitBase(base) {\n  if (typeof base === \"string\") {\n    const [path = \"\", ...search] = base.split(\"?\");\n    return [path, new URLSearchParams(search.join(\"?\"))];\n  } else if (base instanceof URLSearchParams) {\n    return [\"\", new URLSearchParams(base)];\n  } else {\n    return [\n      base.origin + base.pathname,\n      new URLSearchParams(base.searchParams)\n    ];\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nuqs@2.4.3_next@15.3.4_react@19.1.0/node_modules/nuqs/dist/server.js\n");

/***/ })

};
;