/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserRegister"];
                };
            };
            responses: {
                /** @description User created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Validation error (e.g., email already exists). */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in and receive an authentication token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserLogin"];
                };
            };
            responses: {
                /** @description Login successful. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Invalid credentials. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available segments */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of all available content segments. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Segment"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available topics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of all available content topics. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Topic"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/content/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get combined content by category
         * @description Fetches a paginated list of content items (movies, books, music albums, artworks) and creators for a specific category and segment.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter content by a user segment. */
                    segment?: components["parameters"]["SegmentQuery"];
                    /** @description Filter content by a specific topic. */
                    topic?: components["parameters"]["TopicQuery"];
                    /** @description Filter by the type of content to display. */
                    view?: components["parameters"]["ViewQuery"];
                    /** @description The page number for pagination. */
                    page?: components["parameters"]["PageQuery"];
                    /** @description The number of items to return per page. */
                    limit?: components["parameters"]["LimitQuery"];
                };
                header?: never;
                path: {
                    category: "movies" | "music" | "books" | "art";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of content items for the specified category. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeedResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a creator by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the creator. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreatorDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movies/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a movie by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the movie. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MovieDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/albums/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a music album by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the music album. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MusicAlbumDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a book by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the book. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BookDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artworks/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an artwork by slug */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    slug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the artwork. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ArtworkDetail"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserRegister: {
            /** @example John Doe */
            user_name: string;
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @example strongpassword123
             */
            password: string;
        };
        UserLogin: {
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @example strongpassword123
             */
            password: string;
        };
        AuthResponse: {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
            access_token?: string;
            /** @example bearer */
            token_type?: string;
            user?: {
                /** @example 1 */
                id?: number;
                /** @example John Doe */
                user_name?: string;
                /**
                 * Format: email
                 * @example user@example.com
                 */
                email?: string;
            };
        };
        Segment: {
            /** @example instincts */
            code?: string;
            /** @example Instincts */
            name?: string;
        };
        Topic: {
            /** @example eas */
            slug?: string;
            /** @example Easy Start */
            name?: string;
        };
        Creator: {
            /** @example 42 */
            id?: number;
            /** @example damon-albarn */
            slug?: string;
            /** @example Damon Albarn */
            name?: string;
            /**
             * Format: uri
             * @example https://example.com/damon.jpg
             */
            photo_url?: string;
        };
        Movie: {
            /** @example 101 */
            id?: number;
            /** @example interstellar */
            slug?: string;
            /** @example Interstellar */
            title?: string;
            /** Format: uri */
            poster_url?: string;
            /** @example 2014 */
            release_year?: number;
        };
        MusicAlbum: {
            /** @example 202 */
            id?: number;
            /** @example everyday-robots */
            slug?: string;
            /** @example Everyday Robots */
            title?: string;
            /** Format: uri */
            cover_art_url?: string;
            /** @example 2014 */
            release_year?: number;
        };
        MusicTrack: {
            id?: number;
            title?: string;
            duration_seconds?: number;
            track_number?: number;
            /** Format: uri */
            audio_url?: string;
        };
        Book: {
            id?: number;
            slug?: string;
            title?: string;
            /** Format: uri */
            cover_image_url?: string;
            publication_year?: number;
        };
        Artwork: {
            id?: number;
            slug?: string;
            title?: string;
            /** Format: uri */
            image_url?: string;
            creation_year?: number;
        };
        CreatorFeedItem: components["schemas"]["Creator"] & {
            /** @enum {string} */
            type?: "creator";
        };
        MovieFeedItem: components["schemas"]["Movie"] & {
            /** @enum {string} */
            type?: "movie";
        };
        MusicAlbumFeedItem: components["schemas"]["MusicAlbum"] & {
            /** @enum {string} */
            type?: "album";
        };
        BookFeedItem: components["schemas"]["Book"] & {
            /** @enum {string} */
            type?: "book";
        };
        ArtworkFeedItem: components["schemas"]["Artwork"] & {
            /** @enum {string} */
            type?: "artwork";
        };
        Pagination: {
            total_items?: number;
            total_pages?: number;
            current_page?: number;
        };
        FeedResponse: {
            pagination?: components["schemas"]["Pagination"];
            data?: (components["schemas"]["MovieFeedItem"] | components["schemas"]["MusicAlbumFeedItem"] | components["schemas"]["BookFeedItem"] | components["schemas"]["ArtworkFeedItem"] | components["schemas"]["CreatorFeedItem"])[];
        };
        CreatorDetail: components["schemas"]["Creator"] & {
            bio?: string;
            /** Format: date */
            birth_date?: string;
            works?: {
                movies?: components["schemas"]["Movie"][];
                music_albums?: components["schemas"]["MusicAlbum"][];
                books?: components["schemas"]["Book"][];
                artworks?: components["schemas"]["Artwork"][];
            };
        };
        MovieDetail: components["schemas"]["Movie"] & {
            description?: string;
            duration_minutes?: number;
            /** Format: uri */
            video_url?: string;
            directors?: components["schemas"]["Creator"][];
        };
        MusicAlbumDetail: components["schemas"]["MusicAlbum"] & {
            artists?: components["schemas"]["Creator"][];
            tracks?: components["schemas"]["MusicTrack"][];
        };
        BookDetail: components["schemas"]["Book"] & {
            description?: string;
            isbn?: string;
            authors?: components["schemas"]["Creator"][];
        };
        ArtworkDetail: components["schemas"]["Artwork"] & {
            description?: string;
            artists?: components["schemas"]["Creator"][];
        };
    };
    responses: never;
    parameters: {
        /** @description Filter content by a user segment. */
        SegmentQuery: "instincts" | "intellect" | "balance";
        /** @description Filter content by a specific topic. */
        TopicQuery: "eas" | "selfx" | "live" | "doc" | "srl";
        /** @description Filter by the type of content to display. */
        ViewQuery: "works" | "creators" | "all";
        /** @description The page number for pagination. */
        PageQuery: number;
        /** @description The number of items to return per page. */
        LimitQuery: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
