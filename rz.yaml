openapi: 3.0.3
info:
  title: Content Aggregator API
  version: 1.0.0
  description: >
    Unified API for aggregating movies, music, books, and artworks,
    allowing filtering by segment, topic, and view type (works or creators).

servers:
  - url: /api/v1
    description: Development Server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error (e.g., email already exists).

  /auth/login:
    post:
      summary: Log in and receive an authentication token
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials.

  /segments:
    get:
      summary: Get all available segments
      tags: [Lookups]
      responses:
        '200':
          description: A list of all available content segments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'

  /topics:
    get:
      summary: Get all available topics
      tags: [Lookups]
      responses:
        '200':
          description: A list of all available content topics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'

  /content/{category}:
    get:
      summary: Get combined content by category
      description: >
        Fetches a paginated list of content items (movies, books, music albums, artworks)
        and creators for a specific category and segment.
      tags: [Content]
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [movies, music, books, art]
        - $ref: '#/components/parameters/SegmentQuery'
        - $ref: '#/components/parameters/TopicQuery'
        - $ref: '#/components/parameters/ViewQuery'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LimitQuery'
      responses:
        '200':
          description: A paginated list of content items for the specified category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'

  /creators/{slug}:
    get:
      summary: Get a creator by slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about the creator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetail'

  /movies/{slug}:
    get:
      summary: Get a movie by slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about the movie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetail'

  /albums/{slug}:
    get:
      summary: Get a music album by slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about the music album.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MusicAlbumDetail'

  /books/{slug}:
    get:
      summary: Get a book by slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about the book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetail'

  /artworks/{slug}:
    get:
      summary: Get an artwork by slug
      tags: [Content]
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about the artwork.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtworkDetail'

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter JWT token in the format: Bearer <token>"

  parameters:
    SegmentQuery:
      name: segment
      in: query
      description: Filter content by a user segment.
      schema:
        type: string
        enum: [instincts, intellect, balance]

    TopicQuery:
      name: topic
      in: query
      description: Filter content by a specific topic.
      schema:
        type: string
        enum: [eas, selfx, live, doc, srl]

    ViewQuery:
      name: view
      in: query
      description: Filter by the type of content to display.
      schema:
        type: string
        enum: [works, creators, all]

    PageQuery:
      name: page
      in: query
      description: The page number for pagination.
      schema:
        type: integer
        default: 1

    LimitQuery:
      name: limit
      in: query
      description: The number of items to return per page.
      schema:
        type: integer
        default: 20

  schemas:
    # --- Auth Schemas ---
    UserRegister:
      type: object
      required: [user_name, email, password]
      properties:
        user_name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: strongpassword123

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: strongpassword123

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: bearer
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            user_name:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: user@example.com

    # --- Lookup Models ---
    Segment:
      type: object
      properties:
        code:
          type: string
          example: instincts
        name:
          type: string
          example: Instincts

    Topic:
      type: object
      properties:
        slug:
          type: string
          example: eas
        name:
          type: string
          example: Easy Start

    # --- Core Entities ---
    Creator:
      type: object
      properties:
        id: { type: integer, example: 42 }
        slug: { type: string, example: damon-albarn }
        name: { type: string, example: Damon Albarn }
        photo_url:
          type: string
          format: uri
          example: https://example.com/damon.jpg

    Movie:
      type: object
      properties:
        id: { type: integer, example: 101 }
        slug: { type: string, example: interstellar }
        title: { type: string, example: Interstellar }
        poster_url: { type: string, format: uri }
        release_year: { type: integer, example: 2014 }

    MusicAlbum:
      type: object
      properties:
        id: { type: integer, example: 202 }
        slug: { type: string, example: everyday-robots }
        title: { type: string, example: Everyday Robots }
        cover_art_url: { type: string, format: uri }
        release_year: { type: integer, example: 2014 }

    MusicTrack:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        duration_seconds: { type: integer }
        track_number: { type: integer }
        audio_url: { type: string, format: uri }

    Book:
      type: object
      properties:
        id: { type: integer }
        slug: { type: string }
        title: { type: string }
        cover_image_url: { type: string, format: uri }
        publication_year: { type: integer }

    Artwork:
      type: object
      properties:
        id: { type: integer }
        slug: { type: string }
        title: { type: string }
        image_url: { type: string, format: uri }
        creation_year: { type: integer }

    # --- Feed Items (Polymorphic) ---
    CreatorFeedItem:
      allOf:
        - $ref: '#/components/schemas/Creator'
        - type: object
          properties:
            type:
              type: string
              enum: [creator]

    MovieFeedItem:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            type:
              type: string
              enum: [movie]

    MusicAlbumFeedItem:
      allOf:
        - $ref: '#/components/schemas/MusicAlbum'
        - type: object
          properties:
            type:
              type: string
              enum: [album]

    BookFeedItem:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            type:
              type: string
              enum: [book]

    ArtworkFeedItem:
      allOf:
        - $ref: '#/components/schemas/Artwork'
        - type: object
          properties:
            type:
              type: string
              enum: [artwork]

    Pagination:
      type: object
      properties:
        total_items: { type: integer }
        total_pages: { type: integer }
        current_page: { type: integer }

    FeedResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MovieFeedItem'
              - $ref: '#/components/schemas/MusicAlbumFeedItem'
              - $ref: '#/components/schemas/BookFeedItem'
              - $ref: '#/components/schemas/ArtworkFeedItem'
              - $ref: '#/components/schemas/CreatorFeedItem'

    # --- Detailed Schemas ---
    CreatorDetail:
      allOf:
        - $ref: '#/components/schemas/Creator'
        - type: object
          properties:
            bio: { type: string }
            birth_date: { type: string, format: date }
            works:
              type: object
              properties:
                movies: { type: array, items: { $ref: '#/components/schemas/Movie' } }
                music_albums: { type: array, items: { $ref: '#/components/schemas/MusicAlbum' } }
                books: { type: array, items: { $ref: '#/components/schemas/Book' } }
                artworks: { type: array, items: { $ref: '#/components/schemas/Artwork' } }

    MovieDetail:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            description: { type: string }
            duration_minutes: { type: integer }
            video_url: { type: string, format: uri }
            directors:
              type: array
              items: { $ref: '#/components/schemas/Creator' }

    MusicAlbumDetail:
      allOf:
        - $ref: '#/components/schemas/MusicAlbum'
        - type: object
          properties:
            artists:
              type: array
              items: { $ref: '#/components/schemas/Creator' }
            tracks:
              type: array
              items: { $ref: '#/components/schemas/MusicTrack' }

    BookDetail:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            description: { type: string }
            isbn: { type: string }
            authors:
              type: array
              items: { $ref: '#/components/schemas/Creator' }

    ArtworkDetail:
      allOf:
        - $ref: '#/components/schemas/Artwork'
        - type: object
          properties:
            description: { type: string }
            artists:
              type: array
              items: { $ref: '#/components/schemas/Creator' }
